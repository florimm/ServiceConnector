<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsQuery</name>
    </assembly>
    <members>
        <member name="T:CsQuery.Objects">
            <summary>
            A set of utility functions for testing objects. 
            </summary>
        </member>
        <member name="M:CsQuery.Objects.IsNullableType(System.Type)">
            <summary>
            Returns true of the type is a generic nullable type OR string
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsJson(System.Object)">
            <summary>
            Returns true if the string appears to be JSON.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsImmutable(System.Object)">
            <summary>
            Only value types, strings, and null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsExtendableType(System.Object)">
            <summary>
            Returns false if this is a value type, null string, or enumerable (but not Extendable)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsTruthy(System.Object)">
            <summary>
            Returns true when a value is "truthy" using similar logic as Javascript
              null = false
              empty string = false BUT zero string = true
              zero numeric = false
              false boolean values = false
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsNumericType(System.Type)">
            <summary>
            Returns true if the object is a primitive numeric type, e.g. exluding string &amp; char
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsNativeType(System.Type)">
            <summary>
            Returns true if the value is a JS native type (string, number, bool, datetime)
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsExpando(System.Object)">
            <summary>
            Test if an object is "Expando-like", e.g. a an IDictionary-string,object-
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsEmptyExpando(System.Object)">
            <summary>
            Test if an object is a an IDictionary-string,object- that is empty
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.Objects.IsKeyValuePair(System.Object)" -->
        <member name="M:CsQuery.Objects.Coerce(System.Object)">
            <summary>
            Coerce a javascript object into a Javascript type (null, bool, int, double, datetime, or string). If you know what the 
            type should be, then use Convert instead.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.Convert``1(System.Object)">
            <summary>
            Convert an object of any value type to the specified type using any known means
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.Convert(System.Object,System.Type)">
            <summary>
            Convert an object of any value type to the specified type using any known means
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an Object with the specified Type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An Object that implements the IConvertible interface.</param>
            <param name="conversionType">The Type to which value is to be converted.</param>
            <returns>An object whose Type is conversionType (or conversionType's underlying type if conversionType
            is Nullable&lt;&gt;) and whose value is equivalent to value. -or- a null reference, if value is a null
            reference and conversionType is not a value type.</returns>
            <remarks>
            This method exists as a workaround to System.Convert.ChangeType(Object, Type) which does not handle
            nullables as of version 2.0 (2.0.50727.42) of the .NET Framework. The idea is that this method will
            be deleted once Convert.ChangeType is updated in a future version of the .NET Framework to handle
            nullable types, so we want this to behave as closely to Convert.ChangeType as possible.
            This method was written by Peter Johnson at:
            http://aspalliance.com/author.aspx?uId=1026.
            </remarks>
        </member>
        <member name="M:CsQuery.Objects.Enumerate``1(``0)">
            <summary>
            Returns an enumerable of one element from an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.Objects.Dict2Dynamic``1(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:CsQuery.Objects.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combine elements of a list into a single string, separated by separator
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ParseValue(System.Object)">
            <summary>
            Deal with datetime values
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ConvertDeserializedValue``1(System.Object,System.Boolean)">
            <summary>
            Takes a default deserialized value from JavaScriptSerializer and parses it into expando objectes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="convertDates"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.GetUnderlyingType(System.Type)">
            <summary>
            Return the proper type for an object (ignoring nullability)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.Objects.Dict2Dynamic``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)" -->
        <member name="M:CsQuery.Objects.Extend(System.Boolean,System.Object,System.Object[])">
            <summary>
            Map properties of inputObjects to target. If target is an expando object, it will be updated. If not,
            a new one will be created including the properties of target and inputObjects.
            </summary>
            <param name="parents"></param>
            <param name="deep"></param>
            <param name="target"></param>
            <param name="inputObjects"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando(System.Object)">
            <summary>
            Converts a regular object to an expando object, or returns the source object if it is already an expando object.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando(System.Object,System.Boolean)">
            <summary>
            Converts a regular object to an expando object, or returns the source object if it is already an expando object.
            If "deep" is true, child properties are cloned rather than referenced.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.DeleteProperty(System.Object,System.String)">
            <summary>
            Remove a property from an object, returning a new expando object.
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
        </member>
        <member name="M:CsQuery.Objects.DeleteProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Remove a property from an object, returning a new expando object.
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
        </member>
        <member name="M:CsQuery.Objects.AddExtendKVP(System.Boolean,System.Collections.Generic.HashSet{System.Object},System.Object,System.String,System.Object)">
            <summary>
            Implementation of "Extend" functionality
            </summary>
            <param name="deep"></param>
            <param name="parents"></param>
            <param name="target"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Objects.ToNewExpando``1(System.Object,System.Boolean,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Implementation of object>expando
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="deep"></param>
            <param name="ignoreAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.TryStringToBool(System.String,System.Boolean@)">
            <summary>
            Try to parse an english or numeric string into a boolean value
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.NumberToDoubleOrInt(System.IConvertible)">
            <summary>
            Return an int or double from any number
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Utility.Support">
            <summary>
            Some static methods that didn't fit in anywhere else. 
            </summary>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFile(System.String)">
            <summary>
            Read all text of a file, trying to find it from the execution location if not rooted.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFileStream(System.String)">
            <summary>
            Open a stream for a file, trying to find it from the execution location if not rooted.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFilePath(System.String)">
            <summary>
            Try to find the path to a file based on the execution location of the calling assembly
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.FindPathTo(System.String,System.String)">
             <summary>
             Given a rooted path to look within, and a partial path to a file, the full path to the file.
             </summary>
            
             <param name="sourcePath">
             The rooted path to match within
             </param>
             <param name="find">
             The path/filename to find
             </param>
            
             <returns>
             The full rooted path the the file
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFirstExternalAssembly">
             <summary>
             Gets the first assembly that is not the assembly that this method belongs to
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <returns>
             The first external assembly.
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetResourceStream(System.String)">
            <summary>
             Gets a resource from the calling assembly
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetResourceStream(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a resource name using the assembly and resource name
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.CleanFilePath(System.String)">
            <summary>
            Make sure there's one (or zero, if not rooted) leading or trailing slash, 
            and convert slashes to backslashes. Missing values are returned as just one backslash.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.MethodPath(System.Reflection.MemberInfo)">
            <summary>
            Get a fully qualified namespaced path to a member
            </summary>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.MethodPath(System.Type,System.String)">
             <summary>
             Get a fully qualified namespaced path to a member.
             </summary>
            
             <param name="type">
             The type to inspect.
             </param>
             <param name="memberName">
             Name of the member.
             </param>
            
             <returns>
             A string
             </returns>
        </member>
        <member name="M:CsQuery.Utility.Support.TypePath(System.Type)">
             <summary>
             Get a fully qualified namespaced path to a type, e.g. "CsQuery.Utility.Support.TypePath"
             </summary>
            
             <param name="type">
             The type to inspect
             </param>
            
             <returns>
             A string
             </returns>
        </member>
        <member name="T:CsQuery.Utility.SmallDictionary`2">
            <summary>
            A lightweight dictionary for small lists. This is intended to boost performance for situations where we know the list
            will always be small (e.g. like HybridDictionary but even better since there's no need to check size ever). Performance
            testing could reveal that this doesn't affect performance much or it should just be implemented with a regular dictionary;
            I leave this is a different implementation than a standard dictionary so it can be easily changed in the future.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.Reset">
            <summary>
            Use this to prepare the iterator object to continue finding siblings. It retains the parent. It just avoids having to recreate
            an instance of this object for the next tag.
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.ReadText(System.Char[])">
            <summary>
            Read content from the current position as text only (if ReadTextOnly=true)
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.FindNextTag(System.Char[])">
            <summary>
            Advance the pointer to the next caret, or past the end if none is found
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.TryGetLiteral(CsQuery.HtmlParser.HtmlElementFactory,CsQuery.IDomObject@)">
            <summary>
            Returns a literal object for the text between HtmlStart (the last position of the end of a tag) and the current position.
            If !AllowLiterals then it's wrapped in a span.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.CloseElement(CsQuery.HtmlParser.HtmlElementFactory)">
            <summary>
             Close out this element. This method will return true if something can be yielded; this
             this means it's got a parent at the top of the heirarchy. Otherwise it's just closed but 
             false is returned.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.HtmlParser.IterationData.FinishTagOpener(System.Char[],CsQuery.IDomObject@)" -->
        <member name="M:CsQuery.HtmlParser.IterationData.GetTagOpener(System.Char[])">
            <summary>
            Start: the opening caret of a tag
            End: the first stop character (e.g. space after the tag name)
            </summary>
            <param name="current"></param>
            <returns>Tag name</returns>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.GetCloseTag(System.Char[])">
            <summary>
            Start: Expects the position to be after an opening caret for a close tag, and returns the tag name.
            End: Position after closing caret
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.GetTagAttribute(System.Char[])">
            <summary>
            Start: Position inside a tag opening construct
            End: position after last character of tag construct {x=["|']y["|]]} or just {x}) and adds attribute if successful
                 position ON closing caret of tag opener if failed
            </summary>
            <param name="current"></param>
            <returns>
            Returns true if an attribute was added, false if no more attributes were found
            </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.AddNewParent(System.UInt16,System.Int32)">
            <summary>
             Add a new parent of type tagId.
            </summary>
            <param name="tagId"></param>
            /// <param name="pos">The position which the new child should be marked to start parsing.</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.MoveOutsideTag(System.Char[])">
            <summary>
            Move pointer to the first character after the closing caret of this tag. 
            </summary>
            <returns>
            Returns True if there are children
            </returns>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Internal.ExtensionMethods">
            <summary>
            Extension methods used by CsQuery but not specialized enough to be considered useful for clients; therefore
            in a separate namespace.
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsOneOf(System.Enum,System.Enum[])">
            <summary>
            Returns true if the enum is any of the parameters in question
            </summary>
            <param name="theEnum"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="value5"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.GetValue(System.Enum)">
            <summary>
            Return the integer value for an enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.GetValueAsString(System.Enum)">
            <summary>
            Return the integer value cast as a string for an enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Return true of a given collection is null or has no values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseList"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ListAdd(System.String,System.String,System.String)">
            <summary>
            Given a string that repesents a list demarcated by separator, add a new value to it
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ListRemove(System.String,System.String,System.String)">
            <summary>
            Given a string that is a list demarcated by separator, remove a value from it
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SubstringBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the text between startIndex and endIndex (exclusive of endIndex)
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Substring(System.Char[],System.Int32,System.Int32)">
            <summary>
            Return a substring from a character array
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Substring(System.Char[],System.Int32)">
            <summary>
            Return a substring from a character array
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Seek(System.Char[],System.String)">
            <summary>
            Return the position of the first occurrence of a string in a character array 
            </summary>
            <param name="text"></param>
            <param name="seek"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Seek(System.Char[],System.String,System.Int32)">
            <summary>
            Return the position of the first occurrence of a string in a character array that is on or after startIndex
            </summary>
            <param name="text"></param>
            <param name="seek"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.RemoveWhitespace(System.String)">
            <summary>
            Remove all whitespace from a string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.BeforeLast(System.String,System.String)">
            <summary>
            Returns the part of the string before the last occurence of text
            </summary>
            <param name="?"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.After(System.String,System.String)">
            <summary>
            Returns the string after the end of the first occurrence of "find"
            </summary>
            <param name="text"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.AfterLast(System.String,System.String)">
            <summary>
            Return the part of the string that is after the last occurrence of the operand
            </summary>
            <param name="text">The source string</param>
            <param name="find">The text to find</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Before(System.String,System.String)">
            <summary>
            Return the part of a string that is before the first occurrence of the operand
            </summary>
            <param name="text">The source string</param>
            <param name="find">The text to find</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Test if a sequence is null or empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseList"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Try to get the first element of a sequence. If the sequence is null or has no elements, return false.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseList"></param>
            <param name="firstElement"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SingleOrDefaultAlways``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return a single element or the default value; does not fail on >1 value but also returns the default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate over a sequence, calling the delegate for each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="func"></param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.CleanUp(System.String)">
            <summary>
            Clean a string by converts null to an empty string and trimming any whitespace from the beginning and end
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String)">
            <summary>
            Perform a string split using whitespace demarcators (' ', tab, newline, return) and trimming each result
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String,System.Char)">
            <summary>
            Perform a string split that also trims whitespace from each result and removes duplicats
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String,System.Char[])">
            <summary>
            Perform a string split that also trims whitespace from each result and removes duplicats
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Test a string for null or empty; if true, returns an alternate value
            </summary>
            <param name="value"></param>
            <param name="alternate"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IfNull(System.String,System.String)">
            <summary>
            Test a string for null; if true, returns an alternate value
            </summary>
            <param name="value"></param>
            <param name="alternate"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IndexOf``1(``0[],``0,System.Int32)">
            <summary>
            Return the index of item in an array. If count is > 0 then that is conisdered the length of the array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr"></param>
            <param name="item"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Implementation.DomText">
            <summary>
            Used for literal text (not part of a tag)
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomObject`1">
            <summary>
            Base class for anything that exists in the DOM
            </summary>
            
        </member>
        <member name="T:CsQuery.Implementation.DomObject">
            <summary>
            Something that appears in the DOM. This is essentially the same as a Node in the browser DOM,
            but IDomObject represents only things that may appear in the DOM (e.g. not an attribute,
            document, doctype)
            </summary>
        </member>
        <member name="T:CsQuery.IDomObject">
            <summary>
            An node that appears directly in the DOM. This is essentially synonymous with a Node, but it does
            not include attributes.
            
            All properties of Element nodes are implemented in IDomObject even though many are only applicable to
            Elements. Attempting to read a property that doesn't exist on the node type will generally return 'null'
            whereas attempting to write will throw an exception. This is intended to make coding against this model
            the same as coding against the actual DOM, where accessing nonexistent properties is acceptable. Because
            some javascript code actually uses this in logic we allow the same kind of access. It also eliminates the
            need to cast frequently, for example, when accessing the results of a jQuery object by index.
            </summary>
        </member>
        <member name="M:CsQuery.IDomNode.Render">
             <summary>
             Renders the complete HTML for this element, including its children.
             </summary>
            
             <returns>
             a string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.IDomNode.Render(System.Text.StringBuilder)">
             <summary>
             Renders the complete HTML for this element to a StringBuilder
             </summary>
            
             <param name="sb">
             An existing StringBuilder instance to append this element's HTML.
             </param>
        </member>
        <member name="M:CsQuery.IDomNode.Render(System.Text.StringBuilder,CsQuery.DomRenderingOptions)">
             <summary>
             Renders the complete HTML for this element to a StringBuilder using specified options.
             </summary>
            
             <param name="sb">
             An existing StringBuilder instance to append this element's HTML.
             </param>
             <param name="options">
             Options for controlling the operation.
             </param>
        </member>
        <member name="M:CsQuery.IDomNode.Remove">
            <summary>
            Removes this object from it's parent, and consequently the Document, if any, to which it belongs.
            </summary>
        </member>
        <member name="M:CsQuery.IDomNode.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="P:CsQuery.IDomNode.NodeName">
             <summary>
             The node (tag) name, in upper case.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.nodeName
             </url>
        </member>
        <member name="P:CsQuery.IDomNode.NodeValue">
             <summary>
             Gets or sets the value of this node.
             </summary>
            
             <remarks>
             For the document itself, nodeValue returns null. For text, comment, and CDATA nodes,
             nodeValue returns the content of the node.
             </remarks>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.nodeValue
             </url>
        </member>
        <member name="P:CsQuery.IDomNode.HasChildren">
             <summary>
             Gets a value indicating whether this object has any children. For node types that cannot have
             children, it will always return false. To determine if a node is allowed to have children,
             use the ChildrenAllowed property.
             </summary>
            
             <seealso cref="!:ChildrenAllowed"/>
        </member>
        <member name="P:CsQuery.IDomNode.ChildNodes">
            <summary>
            Return an INodeList of the direct children of this node.
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.ChildElements">
            <summary>
            Return a sequence containing only the element children of this node (e.g. no text, cdata, comments)
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.Complete">
            <summary>
            Gets a value indicating whether this node is complete. This is for internal use. During DOM
            construction it is possible for a node object to exist but not be properly configured.
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.IsIndexed">
            <summary>
            Gets a value indicating whether this node should be is indexed. Generally, this is true for IDomElement
            nodes that are within an IDomDocument and false otherwise.
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.IsDisconnected">
             <summary>
             Gets a value indicating whether this object belongs to a Document or not.
             </summary>
            
             <remarks>
             When an object is cloned, it becomes disconnected, and is not bound to any IDomDocument or
             IDomFragment. The only substantive difference between disconnected elements and elements
             belonging to a Document is that they are not indexed.
             </remarks>
        </member>
        <member name="M:CsQuery.IDomObject.AppendChild(CsQuery.IDomObject)">
             <summary>
             Adds a node to the end of the list of children of a specified parent node. If the node
             already exists it is removed from current parent node, then added to new parent node.
             </summary>
            
             <param name="element">
             The element to append.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.appendChild
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.RemoveChild(CsQuery.IDomObject)">
             <summary>
             Removes a child node from the DOM. Returns removed node.
             </summary>
            
             <param name="element">
             The element to remove.
             </param>
            
             <url>
             https://developer.mozilla.org/En/DOM/Node.removeChild
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.InsertBefore(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the specified node before a reference element as a child of the current node.
             </summary>
            
             <param name="newNode">
             The node to insert.
             </param>
             <param name="referenceNode">
             The node before which the new node will be inserted.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.insertBefore
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.InsertAfter(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the specified node after a reference element as a child of the current node.
             </summary>
            
             <remarks>
             This is a CsQuery extension.
             </remarks>
            
             <param name="newNode">
             The new node to be inserted.
             </param>
             <param name="referenceNode">
             The node after which the new node will be inserted.
             </param>
        </member>
        <member name="M:CsQuery.IDomObject.SetAttribute(System.String)">
             <summary>
             Adds a new boolean attribute or sets its value to true.
             </summary>
            
             <remarks>
             In HTML, some element attributes can be specified without a value, such as "checked" or
             "multiple." These are not really attributes but rather the default values for element boolean
             properties. CsQuery does not distinguish between properties and attributes since the DOM is
             stateless, it only reflects the actual markup it represents. The real DOM, to the contrary,
             can be changed through javascript. It would be possible for an element's property to be
             different from the default value that is specified by its markup.
             
             Because of this, we treat properties and attributes the same. A property is simply an
             attribute with no specific value, it either exists or does not exist. This overload of
             SetAttribute allows you to set a boolean attribute. You can use RemoveAttribute to unset it.
             
             It is also possible to set an attribute to an empty string, e.g. with markup like  
                 &lt;div someAttr=""&gt;
                 
             
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
        </member>
        <member name="M:CsQuery.IDomObject.SetAttribute(System.String,System.String)">
             <summary>
             Adds a new attribute or changes the value of an existing attribute on the specified element.
             </summary>
            
             <remarks>
             Setting an attribute to null is the equivalent of using RemoveAttribute. Setting an attribute
             to an empty string will cause it to be rendered as an empty value, e.g.
             
                 &lt;div someAttr=""&gt;
             
             If you want to set a boolean attribute that renders just as the attribute name, use
             SetAttribute(name) overload. When using GetAttribute to inspect an attribute value, note that
             both boolean and empty-string attributes will return an empty string. There is no way to determine
             using GetAttribute if the atttribute was set as a boolean property, or an empty string.
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="value">
             For input elements, the "value" property of this element. Returns null for other element
             types.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.setAttribute
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.GetAttribute(System.String)">
             <summary>
             Returns the value of the named attribute on the specified element. If the named attribute
             does not exist, the value returned will either be null or "" (the empty string)
             </summary>
            
             <remarks>
             If an attribute does not exist, this returns null. If an attribute was set as a boolean
             property attribute, or the attribute has an empty string value, an empty string will be
             returned. Note that an empty-string value for GetAttribute could result in an attribute
             rendering as either a property, or an empty string value, e.g.
             
             &amp;ltdiv someAttr&gt;
             &amp;ltdiv someAttr=""&gt;
             
             There is no way to determine whether an attribute was set as a property or empty string other
             than rendering. The internal data will match the way it was parsed from HTML, or the way it
             was set. When set using  <code>SetAttribute(name)</code> it will be displayed as a boolean
             property; when set using <code>SetAttribute(name,"")</code> it will be displayed as an empty
             string.
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             The attribute value string.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.getAttribute
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.GetAttribute(System.String,System.String)">
             <summary>
             Returns the value of the named attribute on the specified element. If the named attribute
             does not exist, the value returned will either be the provide "defaultValue".
             </summary>
            
             <remarks>
             This overload is a CsQuery extension.
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="defaultValue">
             A string to return if the attribute does not exist.
             </param>
            
             <returns>
             The attribute value string.
             </returns>
            
             <seealso cref="T:CsQuery.IDomObject.GetAttribute"/>
        </member>
        <member name="M:CsQuery.IDomObject.TryGetAttribute(System.String,System.String@)">
             <summary>
             Try to get a named attribute.
             </summary>
            
             <remarks>
             This overload is a CsQuery extension.
             </remarks>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="value">
             The attribute value, or null if the named attribute does not exist.
             </param>
            
             <returns>
             true if the attribute exists, false if it does not.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.HasAttribute(System.String)">
             <summary>
             Returns a boolean value indicating whether the specified element has the specified attribute or not.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             true if the named attribute exists, false if not.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.hasAttribute
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.RemoveAttribute(System.String)">
             <summary>
             Removes an attribute from the specified element.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             true if it the attribute exists, false if the attribute did not exist. If the attribute
             exists it will always be removed, that is, it is not possible for this method to fail unless
             the attribute does not exist.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.removeAttribute
             </url>
        </member>
        <member name="M:CsQuery.IDomObject.HasClass(System.String)">
             <summary>
             Returns a boolean value indicating whether the named class exists on this element.
             </summary>
            
             <param name="className">
             The class name for which to test.
             </param>
            
             <returns>
             true if the class is a member of this elements classes, false if not.
             </returns>
             <remarks>This is a CsQuery extension.</remarks>
        </member>
        <member name="M:CsQuery.IDomObject.AddClass(System.String)">
             <summary>
             Adds the class.
             </summary>
            
             <param name="className">
             The class name for which to test.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.RemoveClass(System.String)">
             <summary>
             Removes the named class from the classes defined for this element.
             </summary>
            
             <remarks>
             This method is a CsQuery extension.
             </remarks>
            
             <param name="className">
             The class name to remove.
             </param>
            
             <returns>
             true if the class exists and was removed from this element, false if the class did not exist.
             If the class exists it will always be removed, that is, it is not possible for this method to
             fail if the class exists.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.HasStyle(System.String)">
             <summary>
             Returns a boolean value indicating whether the named style is defined in the styles for this
             element.
             </summary>
            
             <param name="styleName">
             Name of the style to test.
             </param>
            
             <returns>
             true if the style is explicitly defined on this element, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.AddStyle(System.String)">
             <summary>
             Adds a style descriptor to this element, validating the style name and value against the CSS3
             ruleset. The string should be of the form "styleName: styleDef;", e.g.
             
                 "width: 10px;"
             
             The trailing semicolon is optional.
             
             </summary>
            
             <param name="styleString">
             The style string.
             </param>
        </member>
        <member name="M:CsQuery.IDomObject.AddStyle(System.String,System.Boolean)">
             <summary>
             Adds a style descriptor to this element, optionally validating against the CSS3 ruleset. The
             default method always validates; this overload should be used if validation is not desired.
             </summary>
            
             <param name="style">
             An object encapsulating the Styles associated with this element.
             </param>
             <param name="strict">
             true to enforce validation of CSS3 styles.
             </param>
        </member>
        <member name="M:CsQuery.IDomObject.RemoveStyle(System.String)">
             <summary>
             Removes the named style from this element.
             </summary>
            
             <param name="name">
             The style name.
             </param>
            
             <returns>
             true if the style exists and is removed, false if the style did not exist.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.DescendantCount">
             <summary>
             Return the total number of descendants of this element
             </summary>
            
             <returns>
             int, the total number of descendants
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.Cq">
             <summary>
             Wrap this element in a CQ object. This is the CsQuery equivalent of the common jQuery
             construct $(el). Since there is no default method in C# that we can use to create a similar
             syntax, this method serves the same purpose.
             </summary>
            
             <returns>
             A new CQ object wrapping this element.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject.Clone">
             <summary>
             Clone this element.
             </summary>
            
             <returns>
             A copy of this element that is not bound to the original.
             </returns>
        </member>
        <member name="P:CsQuery.IDomObject.Document">
            <summary>
            The HTML document to which this element belongs
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.ParentNode">
            <summary>
            The direct parent of this node
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Item(System.Int32)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.IDomObject.Item(System.String)">
             <summary>
             Get or set the value of the named attribute on this element.
             </summary>
            
             <param name="attribute">
             The attribute name.
             </param>
            
             <returns>
             An attribute value.
             </returns>
        </member>
        <member name="P:CsQuery.IDomObject.Id">
            <summary>
            Get or set value of the id attribute.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Attributes">
            <summary>
            An interface to access the attributes collection of this element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Style">
            <summary>
            An object encapsulating the Styles associated with this element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.ClassName">
             <summary>
             gets and sets the value of the class attribute of the specified element.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.className
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.Classes">
            <summary>
            A sequence of all the unique class names applied to this object.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Value">
            <summary>
            For input elements, the "value" property of this element. Returns null for other element
            types.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.DefaultValue">
            <summary>
            The value of an input element, or the text of a textarea element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.InnerHTML">
             <summary>
             Gets or sets or gets the HTML of an elements descendants.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.innerHTML
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.InnerText">
             <summary>
             Gets or sets the text content of a node and its descendants.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.textContent
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.FirstChild">
             <summary>
             Returns the node's first child in the tree, or null if the node is childless. If the node is a Document, it returns the first node in the list of its direct children.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.firstChild
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.FirstElementChild">
             <summary>
             Returns the element's first child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.firstElementChild
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.LastChild">
             <summary>
             Returns the last child of a node.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.lastChild
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.LastElementChild">
             <summary>
             Returns the element's last child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.lastElementChild
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.NextSibling">
             <summary>
             Returns the node immediately following the specified one in its parent's childNodes list, or
             null if the specified node is the last node in that list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.nextSibling
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.PreviousSibling">
             <summary>
             Returns the node immediately preceding the specified one in its parent's childNodes list,
             null if the specified node is the first in that list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.previousSibling
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.NextElementSibling">
             <summary>
             Returns the element immediately following the specified one in its parent's children list,
             or null if the specified element is the last one in the list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.nextElementSibling
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.PreviousElementSibling">
             <summary>
             Returns the element immediately prior to the specified one in its parent's children list, or
             null if the specified element is the first one in the list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.previousElementSibling
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.HasAttributes">
            <summary>
            Returns true if this node has any attributes.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.HasClasses">
            <summary>
            Returns true if this node has CSS classes.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.HasStyles">
            <summary>
            Returns true if this node has any styles defined.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Selected">
             <summary>
             Indicates whether the element is selected or not. This value is read-only. To change the
             selection, set either the selectedIndex or selectedItem property of the containing element.
             </summary>
            
             <remarks>
             In CsQuery, this property simply indicates the presence of a "selected" attribute. The
             accompanying "SelectedIndex" and "SelectedItem" properties have not been implemented as of
             this writing.
             </remarks>
            
             <url>
             https://developer.mozilla.org/en/XUL/Attribute/selected
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.Checked">
             <summary>
             Gets or sets a value indicating whether the element is checked.
             </summary>
            
             <remarks>
             In CsQuery, this property simply indicates the presence of a "checked" attribute.
             </remarks>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/checked
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.ReadOnly">
             <summary>
             Gets or sets a value indicating whether the only should be read.
             </summary>
            
             <remarks>
             In CsQuery, this property simply indicates the presence of a "readonly" attribute.
             </remarks>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/readOnly
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.Type">
             <summary>
             The value of the "type" attribute. For input elements, this property always returns a
             lowercase value and defaults to "text" if there is no type attribute. For other element types,
             it simply returns the value of the "type" attribute.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/type
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.Name">
             <summary>
             Gets or sets the name attribute of an DOM object, it only applies to the following elements:
             &lt;a&gt; , &lt;applet&gt; , &lt;form&gt; , &lt;frame&gt; , &lt;iframe&gt; , &lt;img&gt; ,
             &lt;input&gt; , &lt;map&gt; , &lt;meta&gt; , &lt;object&gt; , &lt;option&gt; , &lt;param&gt; ,
             &lt;select&gt; , and &lt;textarea&gt; .
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.name
             </url>
        </member>
        <member name="P:CsQuery.IDomObject.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. It is possible
            for this value to be false but InnerTextAllowed to be true for elements which can have inner
            content, but no child HTML markup, such as &lt;textarea&gt; and &lt;script&gt;
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.InnerTextAllowed">
            <summary>
            Gets a value indicating whether text content is allowed as a child of this element. 
            DEPRECATED 7-1-2012, PLEASE USE ChildrenAllowed(). This will be removed in a future release.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.ChildrenAllowed">
            <summary>
            Gets a value indicating whether this element may have children. When false, it means this is
            a void element.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Depth">
            <summary>
            Gets the depth of this node relative to the Document node, which has depth zero.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Index">
            <summary>
            Gets zero-based index of this object relative to its siblings including all node types.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.PathID">
            <summary>
            Gets a unique ID for this element among its siblings
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Path">
            <summary>
            Gets the unique path to this element from the root of the heirarchy. This is generally only
            used for internal purposes.
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.NodeNameID">
            <summary>
            The internal token ID for this element's node name. 
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject._Document">
            <summary>
            The document.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject._Index">
            <summary>
            Backink property for index.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomObject._PathID">
            <summary>
            This must be accessd by overriding PathID implemenetation in DomElement.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.CloneImplementation">
             <summary>
             The implementation for Clone.
             </summary>
            
             <returns>
             A clone of this object.
             </returns>
        </member>
        <member name="F:CsQuery.Implementation.DomObject._ParentNode">
            <summary>
            The parent node. Do not expose this. _ParentNode should only be managed by the ParentNode
            property.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render">
             <summary>
             Renders the complete HTML for this element, including its children.
             </summary>
            
             <returns>
             a string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render(System.Text.StringBuilder)">
             <summary>
             Renders the complete HTML for this element to a StringBuilder.
             </summary>
            
             <param name="sb">
             An existing StringBuilder instance to append this element's HTML.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Render(System.Text.StringBuilder,CsQuery.DomRenderingOptions)">
             <summary>
             Renders the complete HTML for this element to a StringBuilder using specified options.
             </summary>
            
             <param name="sb">
             An existing StringBuilder instance to append this element's HTML.
             </param>
             <param name="options">
             Options for controlling the operation.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Cq">
             <summary>
             Wrap this element in a CQ object. This is the CsQuery equivalent of the common jQuery
             construct $(el). Since there is no default method in C# that we can use to create a similar
             syntax, this method serves the same purpose.
             </summary>
            
             <returns>
             A new CQ object wrapping this element.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Clone">
             <summary>
             Clone this element.
             </summary>
            
             <returns>
             A copy of this element that is not bound to the original.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Remove">
             <summary>
             Removes this object from it's parent, and consequently the Document, if any, to which it
             belongs.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.DescendantCount">
             <summary>
             Return the total number of descendants of this element.
             </summary>
            
             <returns>
             int, the total number of descendants.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AppendChild(CsQuery.IDomObject)">
             <summary>
             Adds a node to the end of the list of children of a specified parent node. If the node
             already exists it is removed from current parent node, then added to new parent node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="element">
             The element to append.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.appendChild
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.RemoveChild(CsQuery.IDomObject)">
             <summary>
             Removes a child node from the DOM. Returns removed node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="element">
             The element to remove.
             </param>
            
             <url>
             https://developer.mozilla.org/En/DOM/Node.removeChild
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.InsertBefore(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the specified node before a reference element as a child of the current node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="newNode">
             The node to insert.
             </param>
             <param name="referenceNode">
             The node before which the new node will be inserted.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.insertBefore
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.InsertAfter(CsQuery.IDomObject,CsQuery.IDomObject)">
             <summary>
             Inserts the specified node after a reference element as a child of the current node.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="newNode">
             The new node to be inserted.
             </param>
             <param name="referenceNode">
             The node after which the new node will be inserted.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.SetAttribute(System.String)">
             <summary>
             Adds a new boolean attribute or sets its value to true.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="name">
             The attribute name.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.SetAttribute(System.String,System.String)">
             <summary>
             Adds a new attribute or changes the value of an existing attribute on the specified element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="value">
             For input elements, the "value" property of this element. Returns null for other element
             types.
             </param>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.setAttribute
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.GetAttribute(System.String)">
             <summary>
             Returns the value of the named attribute on the specified element. If the named attribute
             does not exist, the value returned will either be null or "" (the empty string)
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             The attribute value string.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.getAttribute
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.GetAttribute(System.String,System.String)">
             <summary>
             Returns the value of the named attribute on the specified element. If the named attribute
             does not exist, the value returned will either be the provide "defaultValue".
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="defaultValue">
             A string to return if the attribute does not exist.
             </param>
            
             <returns>
             The attribute value string.
             </returns>
            
             <seealso cref="T:CsQuery.IDomObject.GetAttribute"/>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.TryGetAttribute(System.String,System.String@)">
             <summary>
             Try to get a named attribute.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="value">
             The attribute value, or null if the named attribute does not exist.
             </param>
            
             <returns>
             true if the attribute exists, false if it does not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.HasAttribute(System.String)">
             <summary>
             Returns a boolean value indicating whether the specified element has the specified attribute
             or not.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             true if the named attribute exists, false if not.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.hasAttribute
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.RemoveAttribute(System.String)">
             <summary>
             Removes an attribute from the specified element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="name">
             The attribute name.
             </param>
            
             <returns>
             true if it the attribute exists, false if the attribute did not exist. If the attribute
             exists it will always be removed, that is, it is not possible for this method to fail unless
             the attribute does not exist.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.removeAttribute
             </url>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.HasClass(System.String)">
             <summary>
             Returns a boolean value indicating whether the named class exists on this element.
             </summary>
            
             <param name="className">
             The class name for which to test.
             </param>
            
             <returns>
             true if the class is a member of this elements classes, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AddClass(System.String)">
             <summary>
             Adds the class.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="className">
             The class name for which to test.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.RemoveClass(System.String)">
             <summary>
             Removes the named class from the classes defined for this element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="className">
             The class name to remove.
             </param>
            
             <returns>
             true if the class exists and was removed from this element, false if the class did not exist.
             If the class exists it will always be removed, that is, it is not possible for this method to
             fail if the class exists.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.HasStyle(System.String)">
             <summary>
             Returns a boolean value indicating whether the named style is defined in the styles for this
             element.
             </summary>
            
             <param name="styleName">
             Name of the style to test.
             </param>
            
             <returns>
             true if the style is explicitly defined on this element, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AddStyle(System.String)">
             <summary>
             Adds a style descriptor to this element, validating the style name and value against the CSS3
             ruleset. The string should be of the form "styleName: styleDef;", e.g.
             
                 "width: 10px;"
             
             The trailing semicolon is optional.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="styleString">
             The style string.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.AddStyle(System.String,System.Boolean)">
             <summary>
             Adds a style descriptor to this element, optionally validating against the CSS3 ruleset. The
             default method always validates; this overload should be used if validation is not desired.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="styleString">
             An object encapsulating the Styles associated with this element.
             </param>
             <param name="strict">
             true to enforce validation of CSS3 styles.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.RemoveStyle(System.String)">
             <summary>
             Removes the named style from this element.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when the requested operation is invalid.
             </exception>
            
             <param name="name">
             The style name.
             </param>
            
             <returns>
             true if the style exists and is removed, false if the style did not exist.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.ToString">
             <summary>
             The ToString() override for an object depends on the type of element.
             </summary>
            
             <returns>
             A <see cref="T:System.String" /> that represents the current IDomObject.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.PathEncode(System.Int32)">
             <summary>
             Converts a number to a compact representation that can be used to create a unique path to
             this element in the DOM herarchy.
             </summary>
            
             <param name="number">
             Number of.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.CsQuery#IDomNode#Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.System#ICloneable#Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.HasChildren">
            <summary>
            Gets a value indicating whether this object has children.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. It is possible
            for this value to be false but InnerTextAllowed to be true for elements which can have inner
            content, but no child HTML markup, such as &lt;textarea&gt; and &lt;script&gt;
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NodeNameID">
            <summary>
            Gets the identifier of the node name.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.InnerTextAllowed">
            <summary>
            Gets a value indicating whether text content is allowed as a child of this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ChildrenAllowed">
            <summary>
            Gets a value indicating whether this element may have children. When false, it means this is
            a void element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Complete">
            <summary>
            When false, this element is not configured properly. (Internal use.)
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.IsIndexed">
            <summary>
            Gets a value indicating whether this object type should be indexed.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Path">
            <summary>
            The full path to this node. This is calculated by requesting the parent path and adding its
            own ID.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Document">
            <summary>
            The DOM for this object. This is obtained by looking at its parents value until it finds a
            non-null Document in a parent. The value is cached locally as long as the current value of
            Parent remains the same.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.InnerText">
            <summary>
            Gets or sets the text content of a node and its descendants.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.InnerHTML">
            <summary>
            Gets or sets or gets the HTML of an elements descendants.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ChildNodes">
            <summary>
            Gets the child nodes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ParentNode">
            <summary>
            The direct parent of this node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.IsDisconnected">
            <summary>
            The element is not associated with an IDomDocument.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.PathID">
            <summary>
            Unique ID assigned when added to a dom. This is not the full path but just the ID at this
            level. The full path is never stored with each node to prevent having to regenerate if node
            trees are moved.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Depth">
            <summary>
            Gets the depth.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ChildElements">
            <summary>
            Gets the child elements.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Index">
            <summary>
            The element's absolute index among its siblings.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.DefaultValue">
            <summary>
            The value of an input element, or the text of a textarea element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NodeValue">
            <summary>
            Gets or sets the node value.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Type">
             <summary>
             The value of the "type" attribute. For input elements, this property always returns a
             lowercase value and defaults to "text" if there is no type attribute. For other element types,
             it simply returns the value of the "type" attribute.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/type
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Name">
             <summary>
             Gets or sets the name attribute of an DOM object, it only applies to the following elements:
             &lt;a&gt; , &lt;applet&gt; , &lt;form&gt; , &lt;frame&gt; , &lt;iframe&gt; , &lt;img&gt; ,
             &lt;input&gt; , &lt;map&gt; , &lt;meta&gt; , &lt;object&gt; , &lt;option&gt; , &lt;param&gt; ,
             &lt;select&gt; , and &lt;textarea&gt; .
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.name
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Id">
            <summary>
            Get or set value of the id attribute.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Value">
            <summary>
            For input elements, the "value" property of this element. Returns null for other element
            types.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ClassName">
            <summary>
            gets and sets the value of the class attribute of the specified element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Classes">
            <summary>
            A sequence of all unique class names defined on this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Attributes">
            <summary>
            An interface to access the attributes collection of this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Style">
            <summary>
            An object encapsulating the Styles associated with this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NodeName">
            <summary>
            The node (tag) name, in upper case.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.FirstChild">
             <summary>
             Returns the node's first child in the tree, or null if the node is childless. If the node is
             a Document, it returns the first node in the list of its direct children.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.firstChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.LastChild">
             <summary>
             Returns the last child of a node.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.lastChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.FirstElementChild">
             <summary>
             Returns the element's first child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.firstElementChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.LastElementChild">
             <summary>
             Returns the element's last child element or null if there are no child elements.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.lastElementChild
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.HasAttributes">
            <summary>
            Returns true if this node has any attributes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.HasClasses">
            <summary>
            Returns true if this node has CSS classes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.HasStyles">
            <summary>
            Returns true if this node has any styles defined.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Selected">
             <summary>
             Indicates whether the element is selected or not. This value is read-only. To change the
             selection, set either the selectedIndex or selectedItem property of the containing element.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Attribute/selected
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Checked">
             <summary>
             Gets or sets a value indicating whether the element is checked.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/checked
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.ReadOnly">
             <summary>
             Gets or sets a value indicating whether the only should be read.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/readOnly
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NextSibling">
             <summary>
             Returns the node immediately following the specified one in its parent's childNodes list, or
             null if the specified node is the last node in that list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.nextSibling
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.PreviousSibling">
             <summary>
             Returns the node immediately preceding the specified one in its parent's childNodes list,
             null if the specified node is the first in that list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Node.previousSibling
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.NextElementSibling">
             <summary>
             Returns the element immediately following the specified one in its parent's children list, or
             null if the specified element is the last one in the list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.nextElementSibling
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.PreviousElementSibling">
             <summary>
             Returns the element immediately prior to the specified one in its parent's children list, or
             null if the specified element is the first one in the list.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/DOM/Element.previousElementSibling
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Item(System.Int32)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Item(System.String)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="attribute">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="M:CsQuery.IDomObject`1.Clone">
             <summary>
             Clone this element.
             </summary>
            
             <returns>
             A copy of this element that is not bound to the original.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject`1.CloneImplementation">
            <summary>
            This is called by the base class DomObject, and ensures that the typed Clone implementations get called when
            the object is accessed through the IDomObject interface.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CsQuery.IDomText">
            <summary>
            Defines an interface for elements whose defintion (not innerhtml) contain non-tag or attribute formed data
            </summary>
        </member>
        <member name="T:CsQuery.IDomInvalidElement">
            <summary>
            Sn element that will be rendered as text because it was determined to be a mismatched tag
            </summary>
        </member>
        <member name="T:CsQuery.ICssStyle">
            <summary>
            A single CSS style
            </summary>
        </member>
        <member name="T:CsQuery.IDomContainer">
            <summary>
            Interface for objects that can contain other objects. Note that to allow some consistency with how DOM
            objects are used in the browser DOM, many methods are part of the base IDomObject interface so that they
            can be used (and return null/missing data) on elements to which they don't apply. So in actuality the only 
            unique methods are nonstandard ones.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IsNthChild(CsQuery.IDomElement,System.String)">
            <summary>
            Criteria should be the formula, optionally preceded by a node type filter e.g. "span|2n"
            </summary>
            <param name="elm"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IsNthLastChild(CsQuery.IDomElement,System.String)">
            <summary>
            Criteria should be the formula, optionally preceded by a node type filter e.g. "span|2n"
            </summary>
            <param name="elm"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IndexOfTypeOnly(CsQuery.IDomElement,System.String,System.Boolean)">
            <summary>
            Return the index of obj within its siblings, including only elements with the same node name
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.NthChilds(CsQuery.IDomElement,System.String)">
            <summary>
            Criteria should be the formula, optionally preceded by a node type filter e.g. "span|2n"
            </summary>
            <param name="elm"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.NthLastChilds(CsQuery.IDomElement,System.String)">
            <summary>
            Criteria should be the formula, optionally preceded by a node type filter e.g. "span|2n"
            </summary>
            <param name="elm"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.OnlyOfType(CsQuery.IDomObject,System.String)">
            <summary>
            Return all child elements of parent that are the only children of their type (or a specific type) within parent
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.OnlyOfTypeImpl(CsQuery.IDomObject)">
            <summary>
            When there's no type, it must return all children that are the only one of that type
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IsEmpty(CsQuery.IDomObject)">
            <summary>
            Element nodes and non-empty text nodes are considered to be children; empty text nodes, comments,
            and processing instructions don’t count as children. A text node is considered empty if it has a data 
            length of zero; so, for example, a text node with a single space isn’t empty.
            </summary>
            <param name="elm"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.Empty(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all child nodes that are empty
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IsParent(CsQuery.IDomObject)">
            <summary>
            Return true of the node is a parent.
            Element nodes and non-empty text nodes are considered to be children; empty text nodes, comments,
            and processing instructions don’t count as children. A text node is considered empty if it has a data 
            length of zero; so, for example, a text node with a single space isn’t empty.
            </summary>
            <param name="elm"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.Has(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.IDomDocument,CsQuery.Engine.Selector)">
            <summary>
            Return all elements of "list" that match selector
            </summary>
            <param name="list"></param>
            <param name="document"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.Visible(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all child nodes that are visible
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.Engine.PseudoSelectors.IsVisible(CsQuery.IDomObject)" -->
        <member name="M:CsQuery.Engine.PseudoSelectors.Enumerate(CsQuery.IDomObject)">
            <summary>
            Yield nothing if obj is null, or the object if not
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operand.Clone">
            <summary>
            Abstract hooks for cloning. To allow more flexibility in inheriting part of the process
            (e.g. part of the code to copy the instance may be shared, but not instance-making code)
            it's split into two parts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operand.IsValidType(System.Type)">
            <summary>
            Since it isn't possible to have compile-time type checking for the generic implementation beyond
            IConvertible, allow implementations to define the types that are valid
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Operand.IsInteger">
            <summary>
            Indicates that this operand is either an integral type or contains an integral value. 
            That is, non-integral types containing integral values will still report true
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.IVariable.Name">
            <summary>
            The name of this variable
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.Implementation.Variable._Value">
            <summary>
            The value has been obtained. When true, the cached value will be used instead of requerying. Clear() resets this.
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.IVariable`1.Clone">
            <summary>
            Release stored value for this variable, causing it to be re-read from the owner
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.IFunction.Name">
            <summary>
            The name of this variable
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.AttributeCollection2">
            <summary>
            This was a hybrid dictionary implementation to see how much we could gain by not creating a new dictionary object except when there were more than 
            x attributes. As it turns out this doesn't gain us much.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection2.#ctor">
            <summary>
            will use the dictionary that its constructed with. This way bound attribute collections can use a common
            dictionary and avoid the expensive process of creating a dictionary object for each element
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection2.SetBoolean(System.String)">
            <summary>
            Sets a boolean only attribute having no value
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection2.Unset(System.String)">
            <summary>
            Removing an attribute implementation
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection2.GetNextIndex">
            <summary>
            Return the next index, and convert to a dictionary if the non-object limit is exceeded
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection2.Set(System.String,System.String)">
            <summary>
            Adding an attribute implementation
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection2.Set(System.UInt16,System.String)">
            <summary>
            Second to last line of defense -- will call back to owning Element for attempts to set class, style, or ID, which are 
            managed by Element.
            </summary>
            <param name="tokenId"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection2.SetRaw(System.UInt16,System.String)">
            <summary>
            Used by DomElement to (finally) set the ID value
            </summary>
            <param name="tokenId"></param>
            <param name="value"></param>
        </member>
        <member name="T:CsQuery.CQ">
             <summary>
             The CQ object is analogus to the basic jQuery object. It has instance methods that mirror the
             methods of a jQuery object, and static methods that mirror utility methods such as "$.map".
             
             Most methods return a new jQuery object that is bound to the same document, but a different
             selection set. In a web browser, you genally only have a single context (the browser DOM).
             Here, you could have many, though most of the time you will only be working with one.
             </summary>
            
             <remarks>
             Document is an IDomDocument object, referred to sometimes as the "DOM", and represents the
             DOM that this CsQuery objects applies to. When CQ methods are run, the resulting CQ object
             will refer to the same Document as the original. Selectors always run against this DOM.
             
             Creating a CQ object from something that is not bound to a DOM (such as an HTML string, or an
             unbound IDomObject or IDomElement object) will result in a new Document being created, that
             is unrelated to any other active objects you may have. Adding unbound elements using methods
             such as Append will cause them to become part of the target DOM. They will be removed from
             whatever DOM they previously belonged to. (Elements cannot be part of more than one DOM). If
             you don't want to remove something while adding to a CQ object from a different DOM, then you
             should clone the elements.
             
             Selection is a set of DOM nodes matching the selector.
             
             Elements is a set of IDomElement nodes matching the selector. This is a subset of Selection -
             it excludes non-Element nodes.
             
             The static Create() methods create new DOMs. To create a CsQuery object based on an existing
             dom, use new CQ() (similar to jQuery() methods).
             </remarks>
            
             <implementation>
             Most of the jQuery methods are implemented in separate files under the "CQ_jQuery" folder. 
             Methods which are not part of the jQuery API are found under the "CQ_CsQuery" folder.
             </implementation>
        </member>
        <member name="M:CsQuery.CQ.EachUntil(System.Func{System.Int32,CsQuery.IDomObject,System.Boolean})">
             <summary>
             Iterate over each matched element, calling the delegate passed by parameter for each element.
             If the delegate returns false, the iteration is stopped.
             </summary>
            
             <remarks>
             The overloads of Each the inspect the return value have a different method name (EachUntil)
             because the C# compiler will not choose the best-matchine method when passing method groups.
             See: http://stackoverflow.com/questions/2057146/compiler-ambiguous-invocation-error-anonymous-
             method-and-method-group-with-fun.
             </remarks>
            
             <param name="func">
             A function delegate returning a boolean, and accepting an integer and an IDomObject
             parameter. The integer is the zero-based index of the current iteration, and the IDomObject
             is the current element.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/each/
             </url>
        </member>
        <member name="M:CsQuery.CQ.EachUntil(System.Func{CsQuery.IDomObject,System.Boolean})">
             <summary>
             Iterate over each matched element, calling the delegate passed by parameter for each element.
             If the delegate returns false, the iteration is stopped.
             </summary>
            
             <remarks>
             The overloads of Each the inspect the return value have a different method name (EachUntil)
             because the C# compiler will not choose the best-matchine method when passing method groups.
             See: http://stackoverflow.com/questions/2057146/compiler-ambiguous-invocation-error-anonymous-
             method-and-method-group-with-fun.
             </remarks>
            
             <param name="func">
             A function delegate returning a boolean.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/each/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Each(System.Action{CsQuery.IDomObject})">
             <summary>
             Iterate over each matched element, calling the delegate passed by parameter for each element
             </summary>
            
             <param name="func">
             A delegate accepting a single IDomObject paremeter
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/each/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Each(System.Action{System.Int32,CsQuery.IDomObject})">
             <summary>
             Iterate over each matched element, calling the delegate passed by parameter for each element.
             </summary>
            
             <param name="func">
             A delegate accepting an integer parameter, and an IDomObject paremeter. The integer is the
             zero-based index of the current iteration.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/each/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Clone">
             <summary>
             Create a deep copy of the set of matched elements.
             </summary>
            
             <returns>
             A new CQ object that contains a clone of each element in the original selection set.
             </returns>
            
             <url>
             http://api.jquery.com/clone/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Hide">
             <summary>
             Hide the matched elements.
             </summary>
            
             <remarks>
             The jQuery docs say "This is roughly equivalent to calling .css('display', 'none')." With
             CsQuery, it is exactly equivalent. Unlike jQuery, CsQuery does not store the current value of
             the "display" style and restore it, because there is no concept of "effective style" in
             CsQuery. We don't attempt to calculate the actual style that would be in effect since we
             don't do any style sheet parsing. Instead, this method really just sets display: none. When
             showing again, any "display" style is removed.
             
             This means if you were to assign a non-default value for "display" such as "inline" to a div,
             then Hide(), then Show(), it would no longer be displayed inline, as it would in jQuery.
             Since CsQuery is not used interactively (yet, anyway), this sequence of events seems unlikely,
             and supporting it exactly as jQuery does seems unnecessary. This functionality could
             certainly be added in the future.
             </remarks>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/hide/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Show">
             <summary>
             Display the matched elements.
             </summary>
            
             <remarks>
             This method simply removes the "display: none" css style, if present. See
             <see cref="T:CsQuery.CQ.Hide"/> for an explanation of how this differs from jQuery.
             </remarks>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/show/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Toggle">
             <summary>
             Display or hide the matched elements.
             </summary>
            
             <returns>
             The curren CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/toggle/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Toggle(System.Boolean)">
             <summary>
             Display or hide the matched elements based on the value of the parameter.
             </summary>
            
             <param name="isVisible">
             true to show the matched elements, or false to hide them.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/toggle/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prev(System.String)">
             <summary>
             Get the immediately preceding sibling of each element in the set of matched elements,
             optionally filtered by a selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/prev/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Next(System.String)">
             <summary>
             Get the immediately following sibling of each element in the set of matched elements. If a
             selector is provided, it retrieves the next sibling only if it matches that selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/next/
             </url>
        </member>
        <member name="M:CsQuery.CQ.NextAll(System.String)">
             <summary>
             Get all following siblings of each element in the set of matched elements, optionally
             filtered by a selector.
             </summary>
            
             <param name="filter">
             A selector that must match each element returned.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/nextAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.NextUntil(System.String,System.String)">
             <summary>
             Get all following siblings of each element up to but not including the element matched by the
             selector, optionally filtered by a selector.
             </summary>
            
             <param name="selector">
             A selector that must match each element returned.
             </param>
             <param name="filter">
             A selector use to filter each result
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/nextUntil/
             </url>
        </member>
        <member name="M:CsQuery.CQ.PrevAll(System.String)">
             <summary>
             Get all preceding siblings of each element in the set of matched elements, optionally
             filtered by a selector.
             </summary>
            
             <param name="filter">
             A selector that must match each element returned.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/prevAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.PrevUntil(System.String,System.String)">
             <summary>
             Get all preceding siblings of each element up to but not including the element matched by the
             selector, optionally filtered by a selector.
             </summary>
            
             <param name="selector">
             A selector that must match each element returned.
             </param>
             <param name="filter">
             A selector use to filter each result.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/prevUntil/
             </url>
        </member>
        <member name="M:CsQuery.CQ.End">
             <summary>
             End the most recent filtering operation in the current chain and return the set of matched
             elements to its previous state.
             </summary>
            
             <returns>
             The CQ object at the root of the current chain, or a new, empty selection if this CQ object
             is the direct result of a Create()
             </returns>
            
             <url>
             http://api.jquery.com/end/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Closest(System.String)">
             <summary>
             Get the first ancestor element that matches the selector, beginning at the current element
             and progressing up through the DOM tree.
             </summary>
            
             <param name="selector">
             A CSS selector.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/closest/#closest1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Closest(CsQuery.IDomObject)">
             <summary>
             Return the element passed by parameter, if it is an ancestor of any elements in the selection
             set.
             </summary>
            
             <param name="element">
             The element to target.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/closest/#closest1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Closest(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Get the first ancestor element of any element in the seleciton set that is also one of the
             elements in the sequence passed by parameter, beginning at the current element and
             progressing up through the DOM tree.
             </summary>
            
             <param name="elements">
             The elements to target.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/closest/#closest1
             </url>
        </member>
        <member name="M:CsQuery.CQ.New">
             <summary>
             Create a new, empty CsQuery object bound to this domain.
             </summary>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Wrap(System.String)">
             <summary>
             Wrap an HTML structure around each element in the set of matched elements.
             </summary>
            
             <param name="wrappingSelector">
             A string that is either a selector or a string of HTML that defines the structure to wrap
             around the set of matched elements.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrap/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Wrap(CsQuery.IDomObject)">
             <summary>
             Wrap an HTML structure around each element in the set of matched elements.
             </summary>
            
             <param name="element">
             An element which is the structure to wrap around the selection set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrap/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Wrap(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Wrap an HTML structure around each element in the set of matched elements.
             </summary>
            
             <param name="wrapper">
             A sequence of elements that is the structure to wrap around the selection set. There may be
             multiple elements but there should be only one innermost element in the sequence.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrap/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapAll(System.String)">
             <summary>
             Wrap an HTML structure around all elements in the set of matched elements.
             </summary>
            
             <param name="wrappingSelector">
             A string that is either a selector or a string of HTML that defines the structure to wrap
             around the set of matched elements.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapall/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapAll(CsQuery.IDomObject)">
             <summary>
             Wrap an HTML structure around all elements in the set of matched elements.
             </summary>
            
             <param name="element">
             An element which is the structure to wrap around the selection set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapall/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapAll(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Wrap an HTML structure around all elements in the set of matched elements.
             </summary>
            
             <param name="wrapper">
             A sequence of elements that is the structure to wrap around each element in the selection
             set. There may be multiple elements but there should be only one innermost element in the
             sequence.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapall/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Unwrap">
             <summary>
             Remove the parents of the set of matched elements from the DOM, leaving the matched elements
             in their place.
             </summary>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/unwrap/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapInner(System.String)">
             <summary>
             Wrap an HTML structure around the content of each element in the set of matched elements.
             </summary>
            
             <param name="selector">
             An HTML snippet or elector expression specifying the structure to wrap around the content of
             the matched elements.
             </param>
            
             <returns>
             The current CQ object
             </returns>
            
             <url>
             http://api.jquery.com/wrapinner/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapInner(CsQuery.IDomObject)">
             <summary>
             Wrap an HTML structure around the content of each element in the set of matched elements.
             </summary>
            
             <param name="wrapper">
             A sequence of elements that is the structure to wrap around the content of the selection set.
             There may be multiple elements but there should be only one innermost element in the sequence.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapinner/
             </url>
        </member>
        <member name="M:CsQuery.CQ.WrapInner(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Wrap an HTML structure around the content of each element in the set of matched elements.
             </summary>
            
             <param name="wrapper">
             A sequence of elements that is the structure to wrap around the content of the selection set.
             There may be multiple elements but there should be only one innermost element in the sequence.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/wrapinner/
             </url>
        </member>
        <member name="M:CsQuery.CQ.GetInnermostContainer(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},CsQuery.IDomElement@,CsQuery.IDomElement@)">
             <summary>
             Ouptuts the deepest-nested object, it's root element from the list of elements passed, and
             returns the depth, given a structure. Helper method for Wrap.
             </summary>
            
             <param name="elements">
             The sequence to analyze
             </param>
             <param name="element">
             [ouy] The innermost element container
             </param>
             <param name="rootElement">
             [out] The root element.
             </param>
            
             <returns>
             The innermost container.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Width(System.Int32)">
             <summary>
             Set the CSS width of each element in the set of matched elements.
             </summary>
            
             <remarks>
             There is no Width() method in CsQuery because this is a value calculated by the browser.
             While we can set the CSS of an element, it would be futile to try to return a useful value.
             If you want to inspect the current CSS width for an element, please use Css() methods
             instead. This ensures there is no confusion about the use of Width() in CsQuery.
             </remarks>
            
             <param name="value">
             An integer representing the number of pixels.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/width/#width2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Width(System.String)">
             <summary>
             Set the CSS width of each element in the set of matched elements.
             </summary>
            
             <remarks>
             There are no Height() or Width() methods  in CsQuery because these are value calculated by
             the browser that depend on the page layout, as well as things like the browser window size
             which don't even exist in CsQuery. While we can set the CSS of an element, it would be futile
             to try to return a useful value. If you want to inspect the current CSS width for an element,
             please use Css() methods instead. This ensures there is no confusion about the use of Width()
             and Height()
             in CsQuery.
             </remarks>
            
             <param name="value">
             An integer along with a unit of measure appended (as a string), e.g. "100px".
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/width/#width2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Height(System.Int32)">
             <summary>
             Set the CSS width of each element in the set of matched elements.
             </summary>
            
             <remarks>
             There are no Height() or Width() methods  in CsQuery because these are value calculated by
             the browser that depend on the page layout, as well as things like the browser window size
             which don't even exist in CsQuery. While we can set the CSS of an element, it would be futile
             to try to return a useful value. If you want to inspect the current CSS width for an element,
             please use Css() methods instead. This ensures there is no confusion about the use of Width()
             and Height()
             in CsQuery.
             </remarks>
            
             <param name="value">
             An integer representing the number of pixels.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/height/#height2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Height(System.String)">
             <summary>
             Set the CSS height of each element in the set of matched elements.
             </summary>
            
             <remarks>
             There are no Height() or Width() methods  in CsQuery because these are value calculated by
             the browser that depend on the page layout, as well as things like the browser window size
             which don't even exist in CsQuery. While we can set the CSS of an element, it would be futile
             to try to return a useful value. If you want to inspect the current CSS width for an element,
             please use Css() methods instead. This ensures there is no confusion about the use of Width()
             and Height()
             in CsQuery.
             </remarks>
            
             <param name="value">
             An integer along with a unit of measure appended (as a string), e.g. "100px".
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/height/#height2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Attr(System.String)">
             <summary>
             Get the value of an attribute for the first element in the set of matched elements.
             </summary>
            
             <param name="name">
             The name of the attribute to get.
             </param>
            
             <returns>
             A string of the attribute value.
             </returns>
            
             <url>
             http://api.jquery.com/attr/#attr1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Attr``1(System.String)">
             <summary>
             Get the value of an attribute for the first element in the set of matched elements.
             </summary>
            
             <remarks>
             This is a CsQuery extension. Attribute values are always stored as strings internally, in
             line with their being created and represented as HTML string data. This method simplifies
             converting to another type such as integer for attributes that represent strongly-type values.
             </remarks>
            
             <typeparam name="T">
             Type to which the attribute value should be converted.
             </typeparam>
             <param name="name">
             The name of the attribute to get.
             </param>
            
             <returns>
             A strongly-typed value representing the attribute.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Attr(System.String,System.IConvertible)">
             <summary>
             Set one or more attributes for the set of matched elements.
             </summary>
            
             <exception cref="T:System.InvalidOperationException">
             Thrown when attemting to change the type of an INPUT element that already exists on the DOM.
             </exception>
            
             <param name="name">
             THe attribute name.
             </param>
             <param name="value">
             The value to set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.AttrSet(System.Object)">
             <summary>
             Map an object to a set of attributes name/values and set those attributes on each object in
             the selection set.
             </summary>
            
             <remarks>
             The jQuery API uses the same method "Attr" for a wide variety of purposes. For Attr and Css
             methods, the overloads that we would like to use to match all the ways the method is used in
             the jQuery API don't work out in the strongly-typed world of C#. To resolved this, the
             methods AttrSet and CssSet were created for methods where an object or a string of JSON are
             passed (a map) to set multiple methods.
             </remarks>
            
             <param name="map">
             An object whose properties names represent attribute names, or a string that is valid JSON
             data that represents an object of attribute names/values.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/attr/#attr2
             </url>
        </member>
        <member name="M:CsQuery.CQ.AttrSet(System.Object,System.Boolean)">
             <summary>
             Map an object to attributes, optionally using "quickSet" to set other properties in addition
             to the attributes.
             </summary>
            
             <param name="map">
             An object whose properties names represent attribute names, or a string that is valid JSON
             data that represents an object of attribute names/values.
             </param>
             <param name="quickSet">
             If true, set any css from a sub-map object passed with "css", html from "html", inner text
             from "text", and css from "width" and "height" properties.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.RemoveAttr(System.String)">
             <summary>
             Remove an attribute from each element in the set of matched elements.
             </summary>
            
             <param name="name">
             The attribute name to remove.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeAttr/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveProp(System.String)">
             <summary>
             Remove a property from the set of matched elements.
             </summary>
            
             <remarks>
             In CsQuery, there is no distinction between an attribute and a property. In a real browser
             DOM, this method will actually remove a property from an element, causing consequences such
             as the inability to set it later. In CsQuery, the DOM is stateless and is simply a
             representation of the HTML that created it. This method is included for compatibility, but
             causes no special behavior.
             </remarks>
            
             <param name="name">
             The property (attribute) name to remove.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeProp/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RenderSelection">
             <summary>
             Renders just the selection set completely.
             </summary>
            
             <remarks>
             This method will only render the HTML for elements in the current selection set. To render
             the entire document for output, use the Render method.
             </remarks>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Render">
             <summary>
             Renders the document to a string.
             </summary>
            
             <remarks>
             This method renders the entire document, regardless of the current selection. This is the
             primary method used for rendering the final HTML of a document after manipulation; it
             includes the &lt;doctype&gt; and &lt;html&gt; nodes.
             </remarks>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Render(CsQuery.IOutputFormatter)">
             <summary>
             Render the entire document, parsed through a formatter passed using the parameter.
             </summary>
            
             <remarks>
             CsQuery by default does not format the output at all, but rather returns exactly the same
             contents of each element from the source, including all extra whitespace. If you want to
             produce output that is formatted in a specific way, you can create an OutputFormatter for
             this purpose. The included <see cref="T:CsQuery.OutputFormatters.FormatPlainText"/> does some
             basic formatting by removing extra whitespace and adding newlines in a few useful places.
             (This formatter is pretty basic). A formatter to perform indenting to create human-readable
             output would be useful and will be included in some future release.
             </remarks>
            
             <param name="format">
             An object that parses a CQ object and returns a string of HTML.
             </param>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Render(CsQuery.DomRenderingOptions)">
             <summary>
             Render the complete DOM with specific options.
             </summary>
            
             <param name="renderingOptions">
             The options flags in effect.
             </param>
            
             <returns>
             A string of HTML
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Render(CsQuery.IOutputFormatter,CsQuery.DomRenderingOptions)">
             <summary>
             Render the entire document, parsed through a formatter passed using the parameter, with the
             specified options.
             </summary>
            
             <param name="formatter">
             The formatter.
             </param>
             <param name="renderingOptions">
             The options flags in effect.
             </param>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Boolean,System.String,System.String)">
             <summary>
             Given two selectors, shows the content of one, and removes the content of the other, based on
             the boolean parameter.
             </summary>
            
             <param name="which">
             A boolean value to indicate whether the first or second selector should be used to determine
             the elements that are kept. When true, the first is kept and the 2nd removed. When false, the
             opposite happens.
             </param>
             <param name="trueSelector">
             The true selector.
             </param>
             <param name="falseSelector">
             The false selector.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Boolean,CsQuery.CQ,CsQuery.CQ)">
             <summary>
             Given two CQ objects, shows the one, and removes the the other from the document, based on
             the boolean parameter.
             </summary>
            
             <param name="which">
             A boolean value to indicate whether the first or second selector should be used to determine
             the elements that are kept. When true, the first is kept and the 2nd removed. When false, the
             opposite happens.
             </param>
             <param name="trueContent">
             The true content.
             </param>
             <param name="falseContent">
             The false content.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Int32,System.String[])">
             <summary>
             Removes all but one of a list selectors/objects based on the zero-based index of the first
             parameter. The remaining one is explicitly shown.
             </summary>
            
             <param name="which">
             An integer representing the zero-based index of the content from the list of items passed
             which should be kept and shown.
             </param>
             <param name="content">
             A variable-length parameters list containing content.
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Int32,CsQuery.CQ[])">
             <summary>
             Removes all but one of a list selectors/objects based on the zero-based index of the first
             parameter. The remaining one is explicitly shown.
             </summary>
            
             <param name="which">
             An integer representing the zero-based index of the content from the list of items passed
             which should be kept and shown.
             </param>
             <param name="content">
             A variable-length parameters list containing content.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SetSelected(System.String,System.IConvertible)">
             <summary>
             Set a specific item, identified by the 2nd parameter, of a named option group, identified by
             the first parameter, as selected.
             </summary>
            
             <param name="groupName">
             The value of the name attribute identifying this option group.
             </param>
             <param name="value">
             The option value to set as selected
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Parent(System.String)">
             <summary>
             Get the parent of each element in the current set of matched elements, optionally filtered by
             a selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/parents/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Parents(System.String)">
             <summary>
             Get the ancestors of each element in the current set of matched elements, optionally filtered
             by a selector.
             </summary>
            
             <param name="filter">
             (optional) a selector which limits the elements returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/parents/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Remove(System.String)">
             <summary>
             Remove all selected elements from the Document.
             </summary>
            
             <param name="selector">
             A selector expression that filters the set of matched elements to be removed.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/remove/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Detach(System.String)">
             <summary>
             This is synonymous with Remove in CsQuery, since there's nothing associated with an element
             that is not rendered. It is included for compatibility.
             </summary>
            
             <remarks>
             CsQuery does not maintain data such as initial visibility state when using Show/Hide, or an
             internal data structure when using Data methods. There is no data associated with an element
             that is not represented entirely through the markup that it will render. In the future, it's
             possible we may add such functionality for certain features, so it may be desirable to use
             Detach instead of Remove in those situations. This ensures forward compatibility.
             </remarks>
            
             <param name="selector">
             A selector expression that filters the set of matched elements to be removed.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.AttrReplace(System.String,System.String,System.String)">
             <summary>
             Perform a substring replace on the contents of the named attribute in each item in the
             selection set.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="replaceWhat">
             The string to match.
             </param>
             <param name="replaceWith">
             The value to replace each occurrence with.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Clear">
            <summary>
            Clear the entire object.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.ClearSelections">
            <summary>
            Clears the current selection set.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.MapMultipleValues(System.Object)">
             <summary>
             Map a CSV or enumerable object to a hashset.
             </summary>
            
             <param name="value">
             the object or sequence to map
             </param>
            
             <returns>
             A new hashset
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SetOptionSelected(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},System.Object,System.Boolean)">
             <summary>
             Helper function for option groups to set multiple options when passed a CSV of values.
             </summary>
            
             <param name="elements">
             .
             </param>
             <param name="value">
             .
             </param>
             <param name="multiple">
             true to multiple.
             </param>
        </member>
        <member name="M:CsQuery.CQ.SetOptionSelected(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},System.Collections.Generic.HashSet{System.String},System.Boolean)">
             <summary>
             Helper function for option groups to set multiple options when passed a CSV of values.
             </summary>
            
             <param name="elements">
             .
             </param>
             <param name="values">
             The values.
             </param>
             <param name="multiple">
             true to multiple.
             </param>
        </member>
        <member name="M:CsQuery.CQ.AddSelection(CsQuery.IDomObject)">
             <summary>
             Add an item to the list of selected elements. It should be part of this DOM.
             </summary>
            
             <param name="element">
             The element to add
             </param>
            
             <returns>
             true if the element was added.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.AddSelection(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Adds each element to the current selection set. 
             </summary>
            
             <param name="elements">
             The elements to add
             </param>
            
             <returns>
             true if any elements were added.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MapRangeToNewCQ(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Func{CsQuery.IDomObject,System.Collections.Generic.IEnumerable{CsQuery.IDomObject}})">
             <summary>
             Map range of elements to a new CQ object using a function delegate to populate it.
             </summary>
            
             <param name="source">
             Source elements
             </param>
             <param name="del">
             Delegate to the mapping function
             </param>
            
             <returns>
             A new CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MergeSelections(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Runs a set of selectors and returns the combined result as a single enumerable.
             </summary>
            
             <param name="selectors">
             A sequence of strings that area each selectors
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process merge selections in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MergeContent(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Runs a set of HTML creation selectors and returns result as a single enumerable.
             </summary>
            
             <param name="content">
             A sequence of strings that are each valid HTML
             </param>
            
             <returns>
             A new sequence containing all the elements from all the selectors.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.OnlyElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Enumerates only the IDomElements in the sequence provided. Any other elemnent types are excluded..
             </summary>
            
             <param name="objects">
             The objects.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process only elements in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FilterIfSelector(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Filter a sequence using a selector if the selector is not empty. If it's empty, return a new
             CQ object containing the original list.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
             <param name="list">
             The source sequence.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FilterIfSelector(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Utility.SelectionSetOrder)">
             <summary>
             Filter a sequence using a selector if the selector is not empty. If it's empty, return a new CQ object
             containing the original list.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
             <param name="list">
             The source sequence
             </param>
             <param name="order">
             The order in which the elements of the new CQ object should be returned
             </param>
            
             <returns>
             A new CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FilterElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.String)">
             <summary>
             Filter a sequence using a selector, ignoring missing selectors
             </summary>
            
             <param name="elements">
             The sequence to filter
             </param>
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             An enumerator that allows foreach to be used to process filter elements in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FilterElementsIgnoreNull(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.String)">
             <summary>
             Filter an element list using another selector. A null selector results in no filtering; an
             empty string selector results in an empty list being return.
             </summary>
            
             <param name="elements">
             The sequence to filter.
             </param>
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             The filtered list.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Has(System.String)">
             <summary>
             Reduce the set of matched elements to those that have a descendant that matches the selector
             or DOM element.
             </summary>
            
             <param name="selector">
             A valid CSS/jQuery selector.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/has/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Has(CsQuery.IDomObject)">
             <summary>
             Reduce the set of matched elements to those that have the element passed as a descendant.
             </summary>
            
             <param name="element">
             The element to match.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/has/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Has(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Reduce the set of matched elements to those that have each of the elements passed as a descendant.
             </summary>
            
             <param name="elements">
             The elements to be excluded.
             </param>
            
             <returns>
             A new CQ object
             </returns>
            
             <url>
             http://api.jquery.com/has/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Index">
             <summary>
             Search for a given element from among the matched elements.
             </summary>
            
             <returns>
             The index of the element, or -1 if it was not found.
             </returns>
            
             <url>
             http://api.jquery.com/index/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Index(System.String)">
             <summary>
             Returns the position of the current selection within the new selection defined by "selector".
             </summary>
            
             <param name="selector">
             The selector string.
             </param>
            
             <returns>
             The zero-based index of the selection within the new selection
             </returns>
            
             <url>
             http://api.jquery.com/index/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Index(CsQuery.IDomObject)">
             <summary>
             Returns the position of the element passed in within the selection set.
             </summary>
            
             <param name="element">
             The element to exclude.
             </param>
            
             <returns>
             The zero-based index of "element" within the selection set, or -1 if it was not a member of
             the current selection.
             </returns>
            
             <url>
             http://api.jquery.com/index/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Index(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Returns the position of the first element in the sequence passed by parameter within the
             current selection set..
             </summary>
            
             <param name="elements">
             The element to look for.
             </param>
            
             <returns>
             The zero-based index of the first element in the sequence within the selection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.GetElementIndex(CsQuery.IDomObject)">
            <summary>
            Return the relative position of an element among its Element siblings (non-element nodes excluded)
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(System.String)">
             <summary>
             Replace the target, which is the result of the selector passed, with the set of matched
             elements.
             </summary>
            
             <param name="selector">
             A selector expression indicating which element(s) to replace.
             </param>
            
             <returns>
             The current CQ object
             </returns>
            
             <url>
             http://api.jquery.com/replaceAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(CsQuery.IDomObject)">
             <summary>
             Replace the target element with the set of matched elements.
             </summary>
            
             <param name="target">
             An element.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/replaceAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Replace each target element with the set of matched elements.
             </summary>
            
             <param name="targets">
             The targets to be replaced.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/replaceAll/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ParentsUntil(System.String,System.String)">
             <summary>
             Get the ancestors of each element in the current set of matched elements, up to but not
             including any element matched by the selector, optionally filtered by another selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
             <param name="filter">
             (optional) a selector which limits the elements returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/parentsUntil/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ParentsUntil(CsQuery.IDomElement,System.String)">
             <summary>
             Get the ancestors of each element in the current set of matched elements, up to but not
             including the element matched by the selector.
             </summary>
            
             <param name="element">
             The element.
             </param>
             <param name="filter">
             (optional) a selector which limits the elements returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/parentsUntil/
             </url>
             
        </member>
        <member name="M:CsQuery.CQ.SelectionHtml">
             <summary>
             Returns the HTML for all selected documents, separated by commas. No inner html or children
             are included.
             </summary>
            
             <remarks>
             This method does not return valid HTML, but rather a single string containing an abbreviated
             version of the markup for only documents in the selection set, separated by commas. This is
             intended for inspecting a selection set, for example while debugging.
             </remarks>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SelectionHtml(System.Boolean)">
             <summary>
             Returns the HTML for all selected documents, separated by commas.
             </summary>
            
             <remarks>
             This method does not return valid HTML, but rather a single string containing an abbreviated
             version of the markup for only documents in the selection set, separated by commas. This is
             intended for inspecting a selection set, for example while debugging.
             </remarks>
            
             <param name="includeInner">
             When true, the complete HTML (e.g. including children) is included for each element.
             </param>
            
             <returns>
             A string of HTML.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Html">
             <summary>
             Get the HTML contents of the first element in the set of matched elements.
             </summary>
            
             <returns>
             A string of HTML.
             </returns>
            
             <url>
             http://api.jquery.com/html/#html1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Html(System.String[])">
             <summary>
             Set the HTML contents of each element in the set of matched elements. Any elements without
             InnerHtml are ignored.
             </summary>
            
             <param name="html">
             One or more strings of HTML markup.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/html/#html2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data">
             <summary>
             Gets the data.
             </summary>
            
             <returns>
             A dynamic object.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String,System.String)">
             <summary>
             Store arbitrary data associated with the specified element, and render it as JSON on the
             element in a format that can be read by the jQuery "Data()" methods.
             </summary>
            
             <param name="key">
             The name of the key to associate with this data object.
             </param>
             <param name="data">
             An string to be associated with the key.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String,System.Object)">
             <summary>
             Store arbitrary data associated with the specified element, and render it as JSON on the
             element in a format that can be read by the jQuery "Data()" methods.
             </summary>
            
             <remarks>
             Though the jQuery "Data" methods are designed to read the HTML5 "data-" attributes like the
             CsQuery version, jQuery Data keeps its data in an internal data store that is unrelated to
             the element attributes. This is not particularly necessary when working in C# since you have
             many other framwork options for managing data. Rather, this method has been implemented to
             simplify passing data back and forth between the client and server. You should be able to use
             CsQuery's Data methods to set arbitrary objects as data, and read them directly from the
             client using the jQuery data method. Bear and mind that because CsQuery intends to write
             every object you assign using "Data" as a JSON string on a "data-" attribute, there's a lot
             of conversion going on which will probably have imperfect results if you just try to use it
             as a way to attach an object to an element. It's therefore advised that you think of it as a
             way to get data to the client primarily.
             </remarks>
            
             <param name="key">
             The name of the key to associate with this data object.
             </param>
             <param name="data">
             An string containing properties to be mapped to JSON data.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data1
             </url>
        </member>
        <member name="M:CsQuery.CQ.DataSet(System.Object)">
             <summary>
             Convert an object to JSON and stores each named property as a data element.
             </summary>
            
             <remarks>
             Because of conflicts with the overloaded signatures compared to the jQuery API, the general
             Data method that maps an entire object has been implemented as DataSet.
             
             Though the jQuery "Data" methods are designed to read the HTML5 "data-" attributes like the
             CsQuery version, jQuery Data keeps its data in an internal data store that is unrelated to
             the element attributes. This is not particularly necessary when working in C# since you have
             many other framwork options for managing data. Rather, this method has been implemented to
             simplify passing data back and forth between the client and server. You should be able to use
             CsQuery's Data methods to set arbitrary objects as data, and read them directly from the
             client using the jQuery data method. Bear and mind that because CsQuery intends to write
             every object you assign using "Data" as a JSON string on a "data-" attribute, there's a lot
             of conversion going on which will probably have imperfect results if you just try to use it
             as a way to attach an object to an element. It's therefore advised that you think of it as a
             way to get data to the client primarily.
             </remarks>
            
             <param name="data">
             An object containing properties which will be mapped to data attributes.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String)">
             <summary>
             Returns an object or value at named data store for the first element in the jQuery collection,
             as set by data(name, value).
             </summary>
            
             <param name="key">
             The named key to identify the data, resulting in access to an attribute named "data-{key}".
             </param>
            
             <returns>
             An object representing the stored data. This could be a value type, or a POCO with properties
             each containing other objects or values, depending on the data that was initially set.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Data``1(System.String)">
             <summary>
             Returns an object or value at named data store for the first element in the jQuery collection,
             as set by data(name, value).
             </summary>
            
             <typeparam name="T">
             The type to which to cast the data. This type should match the type used when setting the
             data initially, or be a type that is compatible with the JSON data structure stored in the
             data attribute.
             </typeparam>
             <param name="key">
             The name of the key to associate with this data object.
             </param>
            
             <returns>
             An object of type T.
             </returns>
            
             <url>
             http://api.jquery.com/data/#data2
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveData">
             <summary>
             Remove all data- attributes from the element.
             </summary>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeData/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveData(System.String)">
             <summary>
             Remove a previously-stored piece of data identified by a key.
             </summary>
            
             <param name="key">
             A string naming the piece of data to delete, or pieces of data if the string has multiple
             values separated by spaces.
             </param>
            
             <returns>
             THe current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeData/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveData(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Remove all data from an element.
             </summary>
            
             <param name="keys">
             An array or space-separated string naming the pieces of data to delete.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeData/
             </url>
        </member>
        <member name="M:CsQuery.CQ.DataRaw(System.String)">
             <summary>
             Returns data as a string, with no attempt to parse it from JSON. This is the equivalent of
             using the Attr("data-{key}") method.
             </summary>
            
             <param name="key">
             The key identifying the data.
             </param>
            
             <returns>
             A string.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.HasData">
             <summary>
             Determine whether an element has any jQuery data associated with it.
             </summary>
            
             <returns>
             true if there is any data, false if not.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery.hasData/
             </url>
        </member>
        <member name="M:CsQuery.CQ.GetTableColumn">
             <summary>
             Given a table header or cell, returns all members of the column in the table. This will most
             likely not work as you would expect if there are colspan cells.
             </summary>
            
             <returns>
             A new CQ object containing all the th and td cells in the specified column.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.GetTableColumn(System.Int32)">
             <summary>
             Selects then zero-based nth cells  (th and td) from all rows in any matched tables. This will
             most likely no do what you expect if the table has colspan cells.
             </summary>
            
             <param name="column">
             The zero-based index of the column to target.
             </param>
            
             <returns>
             A new CQ object containing all the th and td cells in the specified column.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.PrependTo(System.String[])">
             <summary>
             Insert every element in the set of matched elements to the beginning of the target.
             </summary>
            
             <param name="target">
             One or more HTML strings that will be targeted.
             </param>
            
             <returns>
             A CQ object containing all the elements added
             </returns>
            
             <url>
             http://api.jquery.com/prependTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.PrependTo(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert every element in the set of matched elements to the beginning of the target.
             </summary>
            
             <param name="targets">
             The targets to which the current selection will be appended.
             </param>
            
             <returns>
             A new CQ object representing the target elements.
             </returns>
            
             <url>
             http://api.jquery.com/prependTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Find(System.String)">
             <summary>
             Get the descendants of each element in the current set of matched elements, filtered by a
             selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/find/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Find(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Get the descendants of each element in the current set of matched elements, filtered by a
             sequence of elements or CQ object.
             </summary>
            
             <param name="elements">
             The elements to match against.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/find/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Find(CsQuery.IDomObject)">
             <summary>
             Get a single element, if it is a descendant of the current selection set.
             </summary>
            
             <param name="element">
             The element to matc.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/find/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Slice(System.Int32)">
             <summary>
             Reduce the set of matched elements to a subset beginning with the 0-based index provided.
             </summary>
            
             <param name="start">
             The 0-based index at which to begin selecting.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/slice/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Slice(System.Int32,System.Int32)">
             <summary>
             Reduce the set of matched elements to a subset specified by a range of indices.
             </summary>
            
             <param name="start">
             The 0-based index at which to begin selecting.
             </param>
             <param name="end">
             The 0-based index of the element at which to stop selecting. The actual element at this
             position is not included in the result.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/slice/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceWith(System.String[])">
             <summary>
             Replace each element in the set of matched elements with the provided new content.
             </summary>
            
             <param name="content">
             The HTML string of the content to insert.
             </param>
            
             <returns>
             The current CQ object
             </returns>
            
             <url>
             http://api.jquery.com/replaceWith/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceWith(CsQuery.IDomObject)">
             <summary>
             Replace each element in the set of matched elements with the element passed by parameter.
             </summary>
            
             <param name="element">
             The element to replace the content with.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/replaceWith/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ReplaceWith(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Replace each element in the set of matched elements with the sequence of elements or CQ
             object provided.
             </summary>
            
             <param name="elements">
             The new conent to replace the selection set content with.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/replaceWith/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Siblings(System.String)">
             <summary>
             Description: Get the siblings of each element in the set of matched elements, optionally
             filtered by a selector.
             </summary>
            
             <param name="selector">
             A selector used to filter the siblings.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/siblings/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Contents">
             <summary>
             Get the children of each element in the set of matched elements, including text and comment
             nodes.
             </summary>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/contents/
             </url>
        </member>
        <member name="M:CsQuery.CQ.AddClass(System.String)">
             <summary>
             Adds the specified class, or each class in a space-separated list, to each of the set of
             matched elements.
             </summary>
            
             <param name="className">
             One or more class names to be added to the class attribute of each matched element.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/addclass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ToggleClass(System.String)">
             <summary>
             Add or remove one or more classes from each element in the set of matched elements, depending
             on either the class's presence.
             </summary>
            
             <param name="classes">
             One or more class names (separated by spaces) to be toggled for each element in the matched
             set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/toggleClass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.ToggleClass(System.String,System.Boolean)">
             <summary>
             Add or remove one or more classes from each element in the set of matched elements, depending
             on the value of the switch argument.
             </summary>
            
             <param name="classes">
             One or more class names (separated by spaces) to be toggled for each element in the matched
             set.
             </param>
             <param name="addRemoveSwitch">
             a boolean value that determine whether the class should be added (true) or removed (false).
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/toggleClass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.HasClass(System.String)">
             <summary>
             Determine whether any of the matched elements are assigned the given class.
             </summary>
            
             <param name="className">
             The class name to search for.
             </param>
            
             <returns>
             true if the class exists on any of the elements, false if not.
             </returns>
            
             <url>
             http://api.jquery.com/hasclass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.IncludeWhen(System.Boolean)">
             <summary>
             Conditionally includes a selection. This is the equivalent of calling Remove() only when
             "include" is false.
             </summary>
            
             <param name="include">
             true to include, false to exclude.
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.#ctor">
            <summary>
            Creates a new, empty jQuery object.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,CsQuery.CQ)">
            <summary>
            Create a new CsQuery object using an existing instance and a selector. if the selector is null or missing, then
            it will contain no selection results.
            </summary>
            <param name="selector">A valid CSS selector</param>
            <param name="context">The context</param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,CsQuery.IDomElement)">
            <summary>
            Create a new CsQuery object using an existing instance and a selector. if the selector is null or missing, then
            it will contain no selection results.
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,System.String,CsQuery.CQ)">
            <summary>
            Create a new CsQuery object from HTML, and assign CSS from a JSON string, within a context
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,System.Object,CsQuery.CQ)">
            <summary>
            Create a new CsQuery object from HTML, and assign CSS, within a context
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.CQ.#ctor(CsQuery.IDomObject)" -->
        <member name="M:CsQuery.CQ.#ctor(CsQuery.IDomObject,CsQuery.CQ)">
            <summary>
            Create a new CsQuery from a single DOM element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Create a new CsQuery object from an existing CsQuery object (or any set of DOM elements).
            If the source is a unassociated list of DOM elements, the context of the first element will become
            the context of the new CsQuery object.
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.CQ)">
            <summary>
            Create a new CsQuery object from a set of DOM elements, using the DOM from context
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:CsQuery.CQ.op_Implicit(System.String)~CsQuery.CQ">
            <summary>
            Create a new CQ object from html
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.op_Implicit(CsQuery.Implementation.DomObject)~CsQuery.CQ">
            <summary>
            Create a new CQ object from an element
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.LoadDocument(System.Char[])">
            <summary>
            Load from an HTML document. This will try to parse it into a valid document using HTML5 rules. The key word is "try" this
            is not completely implemented.
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:CsQuery.CQ.LoadContent(System.Char[])">
            <summary>
            Load as if content - tag generation (EXCEPT for html/body) is enabled
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:CsQuery.CQ.LoadFragment(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Load as if a fragment - no tag generation whatsoever
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.LoadFragment(System.Char[])">
            <summary>
            Creates a new fragment, e.g. HTML and BODY are not generated
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateNewDocument(System.Char[])">
            <summary>
            Replace the existing DOM with the html (or empty if no parameter passed)
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:CsQuery.CQ.CreateNewFragment(System.Char[])">
            <summary>
            Replace the existing DOM with the html (or empty if no parameter passed)
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String)">
             <summary>
             Select elements and return a new CSQuery object.
             </summary>
            
             <remarks>
             The "Select" method is the default CsQuery method. It's overloads are identical to the
             overloads of the CQ object's property indexer (the square-bracket notation) and it functions
             the same way. This is analogous to the default jQuery method, e.g. $(...).
             </remarks>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(CsQuery.IDomObject)">
             <summary>
             Return a new CQ object wrapping an element.
             </summary>
            
             <param name="element">
             The element to wrap.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return a new CQ object wrapping a sequence of elements.
             </summary>
            
             <param name="elements">
             The elements to wrap
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String,CsQuery.IDomObject)">
             <summary>
             Select elements from within a context.
             </summary>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
             <param name="context">
             The point in the document at which the selector should begin matching; similar to the context
             argument of the CQ.Create(selector, context) method.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Select elements from within a context.
             </summary>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
             <param name="context">
             The points in the document at which the selector should begin matching; similar to the
             context argument of the CQ.Create(selector, context) method. Only elements found below the
             members of the sequence in the document can be matched.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Get">
             <summary>
             Return the active selection set.
             </summary>
            
             <returns>
             An sequence of IDomObject elements representing the current selection set.
             </returns>
            
             <url>
             http://api.jquery.com/get/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Get(System.Int32)">
             <summary>
             Return a specific element from the selection set.
             </summary>
            
             <param name="index">
             The zero-based index of the element to be returned.
             </param>
            
             <returns>
             An IDomObject.
             </returns>
            
             <url>
             http://api.jquery.com/get/
             </url>
        </member>
        <member name="M:CsQuery.CQ.After(System.String)">
             <summary>
             Insert content, specified by the parameter, after each element in the set of matched elements.
             </summary>
            
             <param name="selector">
             A CSS selector that determines the elements to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/after/
             </url>
        </member>
        <member name="M:CsQuery.CQ.After(CsQuery.IDomObject)">
             <summary>
             Insert an element, specified by the parameter, after each element in the set of matched
             elements.
             </summary>
            
             <param name="element">
             The element to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/after/
             </url>
        </member>
        <member name="M:CsQuery.CQ.After(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert elements, specified by the parameter, after each element in the set of matched
             elements.
             </summary>
            
             <param name="elements">
             The elements to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/after/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAtOffset(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Int32)">
             <summary>
             Inserts an element at the specified offset from a target. Helper method for Before and After.
             </summary>
            
             <param name="target">
             Target for the.
             </param>
             <param name="offset">
             The offset.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.CQ.InsertAtOffset(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Int32,CsQuery.CQ@)">
            <summary>
            Insert every element in the selection at or after the index of each target (adding offset to the index).
            If there is more than one target, the a clone is made of the selection for the 2nd and later targets.
            </summary>
            <param name="target"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Eq(System.Int32)">
             <summary>
             Reduce the set of matched elements to the one at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index within the current selection set to match.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/eq/
             </url>
        </member>
        <member name="M:CsQuery.CQ.AndSelf">
             <summary>
             Add the previous set of elements on the stack to the current set.
             </summary>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/andself/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Not(System.String)">
             <summary>
             Selects all elements that do not match the given selector.
             </summary>
            
             <param name="selector">
             A CSS selector.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/not/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Not(CsQuery.IDomObject)">
             <summary>
             Selects all elements except the element passed as a parameter.
             </summary>
            
             <param name="element">
             The element to exclude.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/not/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Not(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Selects all elements except those passed as a parameter.
             </summary>
            
             <param name="elements">
             The elements to be excluded.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/not/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prepend(CsQuery.IDomObject[])">
             <summary>
             Insert content, specified by the parameter, to the beginning of each element in the set of
             matched elements.
             </summary>
            
             <param name="elements">
             One or more elements.
             </param>
            
             <returns>
             A new CQ object representing the inserte content.
             </returns>
            
             <url>
             http://api.jquery.com/prepend/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prepend(System.String[])">
             <summary>
             Insert content, specified by the parameter, to the beginning of each element in the set of
             matched elements.
             </summary>
            
             <param name="selector">
             One or more selectors or HTML strings.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/prepend/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prepend(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert content, specified by the parameter, to the beginning of each element in the set of
             matched elements.
             </summary>
            
             <param name="elements">
             The elements to be inserted.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/prepend/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Prepend(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.CQ@)">
             <summary>
             Insert content, specified by the parameter, to the beginning of each element in the set of
             matched elements.
             </summary>
            
             <param name="elements">
             The elements to be inserted.
             </param>
             <param name="insertedElements">
             A CQ object containing all the elements added.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/prepend/
             </url>
        </member>
        <member name="M:CsQuery.CQ.CssSet(System.Object)">
             <summary>
             Set one or more CSS properties for the set of matched elements from JSON data.
             </summary>
            
             <param name="map">
             An object whose properties names represent css property names, or a string that is valid JSON
             data that represents an object of css style names/values.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/css/#css2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Css(System.String,System.IConvertible)">
             <summary>
             Set one or more CSS properties for the set of matched elements.
             </summary>
            
             <remarks>
             By default, this method will validate that the CSS style name and value are valid CSS3. To
             assing a style without validatoin, use the overload of this method and set the "strict"
             parameter to false.
             </remarks>
            
             <param name="name">
             The name of the style.
             </param>
             <param name="value">
             The value of the style.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/css/#css2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Css``1(System.String)">
             <summary>
             Get the value of a style property for the first element in the set of matched elements, and
             converts to a numeric type T. Any numeric type strings are ignored when converting to numeric
             values.
             </summary>
            
             <typeparam name="T">
             The type. This should probably be a numeric type, but the method will attempt to convert to
             any IConvertible type passed.
             </typeparam>
             <param name="style">
             The name of the CSS style to retrieve.
             </param>
            
             <returns>
             A value of type T.
             </returns>
            
             <url>
             http://api.jquery.com/css/#css1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Css(System.String)">
             <summary>
             Get the value of a style property for the first element in the set of matched elements.
             </summary>
            
             <param name="style">
             The name of the CSS style.
             </param>
            
             <returns>
             A string of the value of the named CSS style.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.FirstElement">
             <summary>
             The first IDomElement (e.g. not text/special nodes) in the selection set, or null if none
             exists.
             </summary>
            
             <returns>
             An IDomElement object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Prop(System.String,System.IConvertible)">
            <summary>
            Set one or more properties for the set of matched elements.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.CQ.SetProp(System.String,System.Object)">
             <summary>
             Helper function for Attr &amp; Prop. Sets a property to true or false for an object that is
             "truthy" or not.
             </summary>
            
             <param name="name">
             The property name.
             </param>
             <param name="value">
             .The value.
             </param>
        </member>
        <member name="M:CsQuery.CQ.Is(System.String)">
             <summary>
             Check the current matched set of elements against a selector and return true if at least one
             of these elements matches the selector.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match elements against.
             </param>
            
             <returns>
             true if at least one element in the selection set matches.
             </returns>
            
             <url>
             http://api.jquery.com/is/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Is(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Check the current matched set of elements against a sequence of elements, or another CQ
             object, and return true if at least one of these elements matches the selector.
             </summary>
            
             <param name="elements">
             A sequence of elements or a CQ object to match against the current selection set.
             </param>
            
             <returns>
             true if the sequence matches, false if it fails.
             </returns>
            
             <url>
             http://api.jquery.com/is/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Is(CsQuery.IDomObject)">
             <summary>
             Check the current matched set of elements against an element, and return true if the element
             is found within the selection set.
             </summary>
            
             <param name="element">
             An element to match against the current selection set.
             </param>
            
             <returns>
             true if it is found, false if it fails.
             </returns>
            
             <url>
             http://api.jquery.com/is/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Children(System.String)">
             <summary>
             Get the children of each element in the set of matched elements, optionally filtered by a
             selector.
             </summary>
            
             <param name="filter">
             A selector that must match each element returned.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/children/
             </url>
        </member>
        <member name="M:CsQuery.CQ.SelectionChildren">
             <summary>
             Return all children of all selected elements. Helper method for Children()
             </summary>
            
             <returns>
             A new sequence.
             </returns>
        </member>
        <member name="F:CsQuery.CQ.DefaultDomRenderingOptions">
            <summary>
            Rendering option flags
            </summary>
        </member>
        <member name="F:CsQuery.CQ.DefaultDocType">
            <summary>
            The default rendering type. This mostly controls the header and how tags are closed. UNIMPLEMENTED right now.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.Create">
            <summary>
            Create an empty CQ object
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String)">
            <summary>
            Creeate a new CQ object from an HTML string
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.Char[])">
            <summary>
            Create a new CQ object from an HTML character array 
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String,System.Object)">
            <summary>
            Create a new CQ from an HTML fragment, and use quickSet to create attributes (and/or css)
            </summary>
            <param name="html">A string of HTML</param>
            <param name="quickSet">an object containing CSS properties and attributes to be applied to the resulting fragment</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String,CsQuery.CQ)">
            <summary>
            Create a new CQ object from an existing context, bound to the same domain.
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
        </member>
        <member name="M:CsQuery.CQ.Create(CsQuery.IDomObject)">
            <summary>
            Create a new CQ object from a single element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Creeate a new CQ object from a squence of elements, or another CQ object
            </summary>
            <param name="elements">A sequence of elements</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.IO.Stream)">
            <summary>
            Create a new CQ object from a stream of HTML, treating the HTML as a content document
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFragment(System.String)">
            <summary>
            Creeate a new fragment from HTML text
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFragment(System.Char[])">
            <summary>
            Create a new fragment from HTML text
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFragment(System.IO.Stream)">
            <summary>
            Create a new fragment from a stream of HTML text
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFragment(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Creeate a new CQ object from a squence of elements, or another CQ object
            </summary>
            <param name="elements">A sequence of elements</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocument(System.String)">
            <summary>
            Creeate a new DOM from HTML text using full HTML5 tag generation
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocument(System.Char[])">
            <summary>
            Creeate a new DOM from HTML text using full HTML5 tag generation
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocument(System.IO.Stream)">
            <summary>
            UNTESTED!
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateDocumentFromFile(System.String)">
            <summary>
            Creates a new DOM from an HTML file.
            </summary>
            <param name="htmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromFile(System.String)">
            <summary>
            Creates a new DOM from an HTML file.
            </summary>
            <param name="htmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrl(System.String,CsQuery.Web.ServerConfig)">
            <summary>
            Creates a new DOM from an HTML file.
            </summary>
            <param name="htmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,CsQuery.Web.ServerConfig)">
            <summary>
            Start an asynchronous request to an HTTP server, returning a promise that will resolve when the request is completed or rejected
            </summary>
            <param name="url"></param>
            <param name="callbackSuccess"></param>
            <param name="callbackFail"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
            <summary>
            Start an asynchronous request to an HTTP server
            </summary>
            <param name="url"></param>
            <param name="callbackSuccess"></param>
            <param name="callbackFail"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,System.Int32,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
            <summary>
            Start an asynchronous request to an HTTP server
            </summary>
            <param name="url"></param>
            <param name="callbackSuccess"></param>
            <param name="callbackFail"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.WaitForAsyncEvents(System.Int32)">
            <summary>
            Waits until all async events have completed. Use for testing primarily as a web app should not stop normally.
            </summary>
            <param name="millisecondsTimeout">The maximum number of milliseconds to wait</param>
            <returns>true if all events were cleared in the allotted time, false if not</returns>
        </member>
        <member name="M:CsQuery.CQ.WhenAll(CsQuery.Promises.IPromise[])">
            <summary>
            Return a new promise that resolves when all the promises passed in are resolved
            </summary>
            <param name="promises"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate over each element in a sequence, and call a delegate for each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="func"></param>
        </member>
        <member name="M:CsQuery.CQ.Map``1(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Func{CsQuery.IDomObject,``0})">
            <summary>
            Map each element of the result set to a new form. If a value is returned from the function, the element
            will be excluded.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elements"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Extend(System.Object,System.Object[])">
            <summary>
            Map each property of the objects in sources to the target object.  Returns an expando object (either 
            the target object, if it's an expando object, or a new expando object)
            </summary>
            <param name="target"></param>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Extend(System.Boolean,System.Object,System.Object[])">
            <summary>
            Map each property of the objects in sources to the target object.  Returns an expando object (either 
            the target object, if it's an expando object, or a new expando object)
            </summary>
            <param name="target"></param>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ToJSON(System.Object)">
            <summary>
            Convert an object to JSON
            </summary>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON``1(System.String)">
            <summary>
            Parse JSON into a typed object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON(System.String)">
            <summary>
            Parse a JSON string into an expando object, or a json value into a primitive type.
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON(System.String,System.Type)">
            <summary>
            Parse a JSON string into an expando object, or a json value into a primitive type.
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ToExpando(System.Object)">
            <summary>
            Convert a dictionary to an expando object. Use to get another expando object from a sub-object of an expando object,
            e.g. as returned from JSON data
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.EnumerateProperties``1(System.Object)">
            <summary>
            Enumerate the values of the properties of an object to a sequence of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.EnumerateProperties``1(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Enumerate the values of the properties of an object to a sequence of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="ignoreAttributes">All properties with an attribute of these types will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Add(System.String)">
             <summary>
             Add elements to the set of matched elements from a selector or an HTML fragment.
             </summary>
            
             <param name="selector">
             A CSS selector.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Add(CsQuery.IDomObject)">
             <summary>
             Add an element to the set of matched elements.
             </summary>
            
             <param name="element">
             The element to add.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Add(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Add elements to the set of matched elements.
             </summary>
            
             <param name="elements">
             The elements to add.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Add(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Add elements to the set of matched elements from a selector or an HTML fragment.
             </summary>
            
             <param name="selector">
             A string representing a selector expression to find additional elements to add to the set of
             matched elements.
             </param>
             <param name="context">
             The point in the document at which the selector should begin matching; similar to the context
             argument of the $(selector, context) method.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Add(System.String,CsQuery.IDomObject)">
             <summary>
             Add elements to the set of matched elements from a selector or an HTML fragment.
             </summary>
            
             <param name="selector">
             A string representing a selector expression to find additional elements to add to the set of
             matched elements.
             </param>
             <param name="context">
             The point in the document at which the selector should begin matching; similar to the context
             argument of the $(selector, context) method.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/add/
             </url>
        </member>
        <member name="M:CsQuery.CQ.EnsureCsQuery(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return a CsQuery object wrapping the enumerable passed, or the object itself if it's already
             a CsQuery obect. Unlike CsQuery(context), this will not create a new CsQuery object from an
             existing one.
             </summary>
            
             <param name="elements">
             A sequence of IDomObject elements.
             </param>
            
             <returns>
             A new CQ object when the source is disconnect elements, or the CQ object passed.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Val``1">
             <summary>
             Get the current value of the first element in the set of matched elements, and try to convert
             to the specified type.
             </summary>
            
             <typeparam name="T">
             The type to which the value should be converted.
             </typeparam>
            
             <returns>
             A value or object of type T.
             </returns>
            
             <url>
             http://api.jquery.com/val/#val1
             </url>
        </member>
        <member name="M:CsQuery.CQ.ValOrDefault``1">
             <summary>
             Gets the current value of the first element in the selection set, converted to the specified
             type, or if the selection set is empty, the default value for the specified type.
             </summary>
            
             <typeparam name="T">
             The type to which the value should be converted.
             </typeparam>
            
             <returns>
             A value or object of type T.
             </returns>
            
             <url>
             http://api.jquery.com/val/#val1
             </url>
             
        </member>
        <member name="M:CsQuery.CQ.Val">
             <summary>
             Get the current value of the first element in the set of matched elements.
             </summary>
            
             <returns>
             A string of the value.
             </returns>
            
             <url>
             http://api.jquery.com/val/#val1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Val(System.Object)">
             <summary>
             Set the value of each element in the set of matched elements. If a comma-separated value is
             passed to a multiple select list, then it will be treated as an array.
             </summary>
            
             <param name="value">
             A string of text or an array of strings corresponding to the value of each matched element to
             set as selected/checked.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/val/#val2
             </url>
        </member>
        <member name="M:CsQuery.CQ.GetValueString(System.Object)">
             <summary>
             Returns: null if the value is null; if it's sequence, the concatenated string of each
             object's ToString(); or finally the object itself its string representation if not a string.
             </summary>
            
             <param name="value">
             The object to process
             </param>
            
             <returns>
             The value string.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.AppendTo(System.String[])">
             <summary>
             Insert every element in the set of matched elements to the end of each element in the targets.
             </summary>
            
             <remarks>
             The .Append() and .appendTo() methods perform the same task. The major difference is in the
             syntax-specifically, in the placement of the content and target. With .Append(), the selector
             expression preceding the method is the container into which the content is inserted. With
             .AppendTo(), on the other hand, the content precedes the method, either as a selector
             expression or as markup created on the fly, and it is inserted into the target container.
             </remarks>
            
             <param name="target">
             A selector that results in HTML to which the selection set will be appended.
             </param>
            
             <returns>
              A CQ object containing all the elements added
             </returns>
            
             <url>
             http://api.jquery.com/appendTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.AppendTo(CsQuery.IDomObject)">
             <summary>
             Insert every element in the set of matched elements to the end of the target.
             </summary>
            
             <param name="target">
             The element to which the elements in the current selection set should be appended.
             </param>
            
             <returns>
             A new CQ object containing the target elements.
             </returns>
            
             <url>
             http://api.jquery.com/appendTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.AppendTo(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert every element in the set of matched elements to the end of the target.
             </summary>
            
             <param name="targets">
             The targets to which the current selection will be appended.
             </param>
            
             <returns>
             A new CQ object containing the target elements.
             </returns>
            
             <url>
             http://api.jquery.com/appendTo/
             </url>
        </member>
        <member name="M:CsQuery.CQ.First">
             <summary>
             Reduce the set of matched elements to the first in the set.
             </summary>
            
             <returns>
             A new CQ object containing the first element in the set, or no elements if the source was
             empty.
             </returns>
            
             <url>
             http://api.jquery.com/first/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Last">
             <summary>
             Reduce the set of matched elements to the last in the set.
             </summary>
            
             <returns>
             A new CQ object containing the last element in the set, or no elements if the source was
             empty.
             </returns>
            
             <url>
             http://api.jquery.com/last/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Before(System.String)">
             <summary>
             Insert content, specified by the parameter, before each element in the set of matched
             elements.
             </summary>
            
             <param name="selector">
             A CSS selector that determines the elements to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/before/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Before(CsQuery.IDomObject)">
             <summary>
             Insert the element, specified by the parameter, before each element in the set of matched
             elements.
             </summary>
            
             <param name="element">
             The element to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/before/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Before(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert each element, specified by the parameter, before each element in the set of matched
             elements.
             </summary>
            
             <param name="elements">
             The elements to insert.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/before/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.String[])">
             <summary>
             Insert content, specified by the parameter, to the end of each element in the set of matched
             elements.
             </summary>
            
             <param name="content">
             One or more HTML strings to append.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(CsQuery.IDomObject)">
             <summary>
             Insert the element, specified by the parameter, to the end of each element in the set of
             matched elements.
             </summary>
            
             <param name="element">
             The element to exclude.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert the sequence of elements, specified by the parameter, to the end of each element in
             the set of matched elements.
             </summary>
            
             <param name="elements">
             The elements to be excluded.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Func{System.Int32,System.String,System.String})">
             <summary>
             Appends a func.
             </summary>
            
             <param name="func">
             A delegate to a function that returns an HTML string to insert at the end
             of each element in the set of matched elements. Receives the index position of the element in
             the set and the old HTML value of the element as arguments. Within the function, this refers
             to the current element in the set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Func{System.Int32,System.String,CsQuery.IDomElement})">
             <summary>
             Insert content, specified by the parameter, to the end of each element in the set of matched
             elements.
             </summary>
            
             <param name="func">
             A delegate to a function that returns an IDomElement to insert at the end of each element in
             the set of matched elements. Receives the index position of the element in the set and the
             old HTML value of the element as arguments. Within the function, this refers to the current
             element in the set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Func{System.Int32,System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomElement}})">
             <summary>
             Insert content, specified by the parameter, to the end of each element in the set of matched
             elements.
             </summary>
            
             <param name="func">
             A delegate to a function that returns a sequence of IDomElement objects to insert at the end
             of each element in the set of matched elements. Receives the index position of the element in
             the set and the old HTML value of the element as arguments. Within the function, this refers
             to the current element in the set.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/append/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.CQ@)">
             <summary>
             Append each element passed by parameter to each element in the selection set. The inserted
             elements are returned.
             </summary>
            
             <param name="elements">
             The elements to be excluded.
             </param>
             <param name="insertedElements">
             A CQ object containing all the elements added.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.GetTrueTarget(CsQuery.IDomElement)">
            <summary>
            Deals with tbody as the target of appends
            </summary>
            <param name="apparentTarget"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.MakeRoot">
             <summary>
             The current selection set will become the only members of the document in this object. This
             is a destructive method that will completely replace the document.
             </summary>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.MakeRoot(System.String)">
             <summary>
             The elements identified by the selector will become the only members of the document in this
             object. This is a destructive method that will completely replace the document.
             </summary>
            
             <param name="selector">
             A selector that determines which elements will become the new document.
             </param>
            
             <returns>
             The current CQ object
             </returns>
        </member>
        <member name="M:CsQuery.CQ.Text">
             <summary>
             Get the combined text contents of each element in the set of matched elements, including
             their descendants.
             </summary>
            
             <returns>
             A string containing the text contents of the selection.
             </returns>
            
             <url>
             http://api.jquery.com/text/#text1
             </url>
        </member>
        <member name="M:CsQuery.CQ.Text(System.String)">
             <summary>
             Set the content of each element in the set of matched elements to the specified text.
             </summary>
            
             <param name="value">
             A string of text.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/text/#text2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Text(System.Func{System.Int32,System.String,System.Object})">
             <summary>
             Set the content of each element in the set of matched elements to the text returned by the
             specified function delegate.
             </summary>
            
             <param name="func">
             A delegate to a function that returns an HTML string to insert at the end of each element in
             the set of matched elements. Receives the index position of the element in the set and the
             old HTML value of the element as arguments. The function can return any data type, if it is not
             a string, it's ToString() method will be used to convert it to a string.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/text/#text2
             </url>
        </member>
        <member name="M:CsQuery.CQ.Text(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Helper for public Text() function to act recursively.
             </summary>
            
             <param name="sb">
             .
             </param>
             <param name="elements">
             .
             </param>
        </member>
        <member name="M:CsQuery.CQ.Text(CsQuery.IDomObject)">
             <summary>
             Get the combined text contents of this and all child elements.
             </summary>
            
             <param name="obj">
             The object.
             </param>
            
             <returns>
             A string containing the text contents of the selection.
             </returns>
        </member>
        <member name="M:CsQuery.CQ.SetChildText(CsQuery.IDomElement,System.String)">
             <summary>
             Sets a child text for this element, using the text node type appropriate for this element's type
             </summary>
            
             <param name="el">
             The element to add text to
             </param>
             <param name="text">
             The text.
             </param>
        </member>
        <member name="M:CsQuery.CQ.Filter(System.String)">
             <summary>
             Reduce the set of matched elements to those that match the selector or pass the function's
             test.
             </summary>
            
             <param name="selector">
             A string containing a selector expression to match the current set of elements against.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(CsQuery.IDomObject)">
             <summary>
             Reduce the set of matched elements to those that matching the element passed by parameter.
             </summary>
            
             <param name="element">
             The element to match.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Reduce the set of matched elements to those matching any of the elements in a sequence passed
             by parameter.
             </summary>
            
             <param name="elements">
             The elements to match.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(System.Func{CsQuery.IDomObject,System.Boolean})">
             <summary>
             Reduce the set of matched elements to those that match the selector or pass the function's
             test.
             </summary>
            
             <remarks>
             This method doesn't offer anything that can't easily be accomplished with a LINQ "where"
             query but is included for completeness.
             </remarks>
            
             <param name="function">
             A function used as a test for each element in the set.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.Filter(System.Func{CsQuery.IDomObject,System.Int32,System.Boolean})">
             <summary>
             Reduce the set of matched elements to those that match the selector or pass the function's
             test.
             </summary>
            
             <remarks>
             This method doesn't offer anything that can't easily be accomplished with a LINQ "where"
             query but is included for completeness.
             </remarks>
            
             <param name="function">
             A function used as a test for each element in the set.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/filter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(CsQuery.IDomObject)">
             <summary>
             Insert every element in the set of matched elements after the target.
             </summary>
            
             <summary>
             Inserts an after described by target.
             </summary>
            
             <param name="target">
             The target to insert after.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/insertAfter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert every element in the set of matched elements after each element in the target sequence.
             </summary>
            
             <remarks>
             If there is a single element in the target, the elements in the selection set will be moved
             before the target (not cloned). If there is more than one target element, however, cloned
             copies of the inserted element will be created for each target after the first, and that new
             set (the original element plus clones) is returned.
             </remarks>
            
             <param name="target">
             A sequence of elements or a CQ object.
             </param>
            
             <returns>
             The set of elements inserted, including the original elements and any clones made if there
             was more than one target.
             </returns>
            
             <url>
             http://api.jquery.com/insertAfter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(System.String)">
             <summary>
             Insert every element in the set of matched elements after the target.
             </summary>
            
             <remarks>
             If there is a single element in the resulting set of the selection created by the parameter
             selector, then the original elements in this object's selection set will be moved before it.
             If there is more than one target element, however, cloned copies of the inserted element will
             be created for each target after the first, and that new set (the original element plus
             clones) is returned.
             </remarks>
            
             <param name="selectorTarget">
             A selector identifying the target elements after which each element in the current set will
             be inserted.
             </param>
            
             <returns>
             The set of elements inserted, including the original elements and any clones made if there
             was more than one target.
             </returns>
            
             <url>
             http://api.jquery.com/insertAfter/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertBefore(System.String)">
             <summary>
             Insert every element in the set of matched elements before each elemeent in the selection set
             created from the target selector.
             </summary>
            
             <remarks>
             If there is a single element in the resulting set of the selection created by the parameter
             selector, then the original elements in this object's selection set will be moved before it.
             If there is more than one target element, however, cloned copies of the inserted element will
             be created for each target after the first, and that new set (the original element plus
             clones) is returned.
             </remarks>
            
             <param name="selector">
             A selector. The matched set of elements will be inserted before the element(s) specified by
             this selector.
             </param>
            
             <returns>
             The set of elements inserted, including the original elements and any clones made if there
             was more than one target.
             </returns>
            
             <url>
             http://api.jquery.com/insertBefore/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertBefore(CsQuery.IDomObject)">
             <summary>
             Insert every element in the set of matched elements before the target.
             </summary>
            
             <param name="target">
             The element to which the elements in the current selection set should inserted after.
             </param>
            
             <returns>
             The current CQ object
             </returns>
            
             <url>
             http://api.jquery.com/insertBefore/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertBefore(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Insert every element in the set of matched elements before the target.
             </summary>
            
             <remarks>
             If there is a single element in the target, the elements in the selection set will be moved
             before the target (not cloned). If there is more than one target element, however, cloned
             copies of the inserted element will be created for each target after the first, and that new
             set (the original element plus clones) is returned.
             </remarks>
            
             <param name="target">
             A sequence of elements or a CQ object that is the target; each element in the selection set
             will be inserted after each element in the target.
             </param>
            
             <returns>
             The set of elements inserted, including the original elements and any clones made if there
             was more than one target.
             </returns>
            
             <url>
             http://api.jquery.com/insertBefore/
             </url>
        </member>
        <member name="M:CsQuery.CQ.InsertAtOffset(CsQuery.IDomObject,System.Int32)">
            <summary>
            Support for InsertAfter and InsertBefore. An offset of 0 will insert before the current element. 1 after.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Empty">
             <summary>
             Remove all child nodes of the set of matched elements from the DOM.
             </summary>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/empty/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveClass">
             <summary>
             Remove all classes from each element in the set of matched elements.
             </summary>
            
             <returns>
             The current CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/removeClass/
             </url>
        </member>
        <member name="M:CsQuery.CQ.RemoveClass(System.String)">
             <summary>
             Remove one or more classess from each element in the set of matched elements.
             </summary>
            
             <param name="className">
             One or more space-separated classes to be removed from the class attribute of each matched
             element.
             </param>
            
             <returns>
             The current CQ object.
             </returns>
        </member>
        <member name="P:CsQuery.CQ.Length">
             <summary>
             The number of elements in the CQ object.
             </summary>
            
             <url>
             http://api.jquery.com/length/
             </url>
        </member>
        <member name="P:CsQuery.CQ.Document">
             <summary>
             Represents the full, parsed DOM for an object created with an HTML parameter. The Document is
             the equivalent of the "document" in a browser. The Document node for a complete HTML document
             should have only two children, the DocType node and the HTML node.
             </summary>
            
             <value>
             Returns the Document for this CQ object. This can also be an IDomFragment type, which is a
             derived type of IDomDocument. This is mostly a useful distinction to determine
             programatically how the CQ object was created and whether it's intended to represent a
             complete HTML document, or only a partial fragment.
             </value>
        </member>
        <member name="P:CsQuery.CQ.Selector">
             <summary>
             The selector (parsed) used to create this instance.
             </summary>
            
             <remarks>
             This is not guaranteed to have useful data, since CQ objects can be created indirectly and
             not represent a selector. If this object was created directly from a selector, this will
             contain the Selector object. The ToString() overload will show how the selector was parsed.
             </remarks>
        </member>
        <member name="P:CsQuery.CQ.Selection">
            <summary>
            The entire selection set as a sequence of elements. This is the default enumerator for a CQ
            object as well.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Elements">
            <summary>
            Returns only IDomElement objects from the current selection.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Order">
            <summary>
            Gets or sets the order in which the selection set is returned. Usually, this is the order
            that elements appear in the DOM. Some operations could result in a selection set that's in an
            arbitrary order, though.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.CsQueryParent">
            <summary>
            The object from which this CsQuery was created.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.SelectionSet">
            <summary>
            The current selection set including all node types.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Item(System.Int32)">
             <summary>
             Return a specific element from the selection set.
             </summary>
            
             <param name="index">
             The zero-based index of the element to be returned.
             </param>
            
             <returns>
             An IDomObject.
             </returns>
            
             <url>
             http://api.jquery.com/get/.
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String)">
             <summary>
             Select elements and return a new CSQuery object.
             </summary>
            
             <remarks>
             The "Select" method is the default CsQuery method. It's overloads are identical to the
             overloads of the CQ object's property indexer and it functions the same way. This is
             analogous to the default jQuery method, e.g. $(...).
             </remarks>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(CsQuery.IDomObject)">
             <summary>
             Return a new CQ object wrapping an element.
             </summary>
            
             <param name="element">
             The element to wrap.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Return a new CQ object wrapping a sequence of elements.
             </summary>
            
             <param name="element">
             The elements to wrap.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String,CsQuery.IDomObject)">
             <summary>
             Select elements from within a context.
             </summary>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
             <param name="context">
             The point in the document at which the selector should begin matching; similar to the context
             argument of the CQ.Create(selector, context) method.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Select elements from within a context.
             </summary>
            
             <param name="selector">
             A string containing a selector expression.
             </param>
             <param name="context">
             The points in the document at which the selector should begin matching; similar to the
             context argument of the CQ.Create(selector, context) method. Only elements found below the
             members of the sequence in the document can be matched.
             </param>
            
             <returns>
             A new CQ object.
             </returns>
            
             <url>
             http://api.jquery.com/jQuery/#jQuery1
             </url>
        </member>
        <member name="P:CsQuery.CQ.Browser">
            <summary>
            Provide simple user agent information
            </summary>
        </member>
        <member name="T:CsQuery.Web.CsQueryHttpContext">
            <summary>
            Server extension to CsQuery -- adds functionality for dealing with postbacks, and getting data from 
            external sources
            </summary>
        </member>
        <member name="M:CsQuery.Web.CsQueryHttpContext.Render">
            <summary>
            Renders the DOM to the bound TextWriter.
            </summary>
        </member>
        <member name="M:CsQuery.Web.CsQueryHttpContext.Create">
             <summary>
             Create a context from the bound method information
             </summary>
            
        </member>
        <member name="M:CsQuery.Web.CsQueryHttpContext.WriteJson(System.String,System.Object)">
            <summary>
            Write json data to a global variable
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.ControlRenderMethod">
            <summary>
            A delegate to the Render method of a WebForms Page object
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.RealWriter">
            <summary>
            A reference to the HtmlTextWriter passed into the Render method
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.Page">
            <summary>
            The ASP.NET WebForms Page object bound to this context
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.Dom">
            <summary>
            The CQ object representing the output from the Render method
            </summary>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.IsAsync">
             <summary>
             Gets a value indicating whether this is an asynchronous get (e.g., an UpdatePanel).
             </summary>
            
             <value>
             true if this object is asynchronous, false if not.
             </value>
        </member>
        <member name="P:CsQuery.Web.CsQueryHttpContext.AsyncPostbackData">
             <summary>
             Sequence of AsyncPostbackData objects representing the HTML and metadata for each UpdatePanel
             that is part of the response
             </summary>
            
             <value>
             Object encapsulating the UpdatePanel data.
             </value>
        </member>
        <member name="T:CsQuery.Implementation.DomContainer`1">
            <summary>
            Base class for Dom object that contain other elements
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.ChildNodes">
            <summary>
            Returns all children (including inner HTML as objects);
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.ChildElements">
            <summary>
            Returns all elements
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.IExpectPattern">
            <summary>
            An interface for pattern matching.
            
            Something implementing this interface will be used as follows:
            
            First, Initialize is called, passing in the source and the starting index where scanning
            should begin.
            
            The Validate function then scans the string, and returns true if a valid match is found, and
            false if not.
            
            The Result property should be populated by the function with the matching string, and the
            EndIndex property should be populated with the last position scanned (one after the last
            valid character that was returned). If no valid string was matched, EndIndex should equal the
            original StartIndex.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IExpectPattern.Initialize(System.Int32,System.Char[])">
             <summary>
             Initializes the pattern
             </summary>
            
             <param name="startIndex">
             The start index.
             </param>
             <param name="source">
             Source for the.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.IExpectPattern.Validate">
             <summary>
             Validate the string and try to match something.
             </summary>
            
             <returns>
             true if a matching string was found, false if not.
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.IExpectPattern.Result">
             <summary>
             When a valid string was found, the string.
             </summary>
            
             <value>
             A string.
             </value>
        </member>
        <member name="P:CsQuery.StringScanner.IExpectPattern.EndIndex">
             <summary>
             Gets zero-based index of the ending postion. This is one position after the last matching
             character.
             </summary>
            
             <value>
             The end index.
             </value>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.Validate">
            <summary>
            By default, returns true if the string is not empty
            </summary>
            <param name="result"></param>
            <param name="parsedResult"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.GetOuput(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Copy the source to an output string betweem startIndex and endIndex, optionally unescaping part of it
            </summary>
            <param name="source"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="quotedStartIndex"></param>
            <param name="quotedEndIndex"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.StringScanner.Patterns.Number.RequireWhitespaceTerminator">
            <summary>
            Normally true
            </summary>
        </member>
        <member name="T:CsQuery.Utility.SelectionSet`1">
            <summary>
            A list of DOM elements. The default order is the order added to this construct; the Order property can be changed to
            return the contents in a different order.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CsQuery.Utility.SelectionSet`1.Touch">
            <summary>
            Force the list to be re-sorted.
            </summary>
        </member>
        <member name="M:CsQuery.Utility.SelectionSet`1.SynchronizeOrderedListAfterRemove">
            <summary>
            Use after set operations that alter the list
            </summary>
        </member>
        <member name="P:CsQuery.Utility.SelectionSet`1.Order">
            <summary>
            The order in which elements in the set are returned
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.CSSStyleDeclaration._Styles">
            <summary>
            Warning: Do not attempt to access _Styles directly from this class or any subclass to determine whether or 
            not there are styles, since it also depends on QuickSetStyles. Use HasStyles method instead.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Clone(CsQuery.Implementation.DomElement)">
            <summary>
            Create a clone of this CSSStyleDeclaration object bound to the owner passed
            </summary>
            <param name="owner"></param>
            <returns>CSSStyleDeclaration</returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetStyles(System.String)">
            <summary>
            Sets all the styles from a single CSS style string. Any existing styles will be erased.
            Styles will be validated and an error thrown if an invalid style is attempted.
            </summary>
            <param name="styles">A legal HTML style string</param>
            <param name="strict">When true, the styles will be validated and an error thrown if any are not valid</param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetStyles(System.String,System.Boolean)">
            <summary>
            Sets all the styles from a single CSS style string. Any existing styles will be erased.
            This method is used by DomElementFactory (not in strict mode).
            </summary>
            <param name="styles">A legal HTML style string</param>
            <param name="strict">When true, the styles will be validated and an error thrown if any are not valid</param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.AddStyles(System.String,System.Boolean)">
            <summary>
            Add one or more styles to this element. Unlike SetStyle, existing styles are not affected, except
            for existing styles of the same name.
            </summary>
            <param name="styles"></param>
            <param name="strict"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Remove(System.String)">
            <summary>
            Remove a single named style
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Add(System.String,System.String)">
            <summary>
            Add a single style
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Clear">
            <summary>
            Remove all styles
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.HasStyle(System.String)">
            <summary>
            Returns true if the named style is defined
            </summary>
            <param name="styleName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetRaw(System.String,System.String)">
            <summary>
            Sets style setting with no parsing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.UpdateIndex(System.Boolean)">
            <summary>
            Adds, removes, or does nothing to the index depending on whether a change is needed
            </summary>
            <param name="previouslyHadStyles"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.ValidateUnitString(System.String,System.String)">
            <summary>
            Cleans/validates a CSS units string, or throws an error if not possible
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.ParseCamelCase(System.String)">
            <summary>
            Convert camelcased CSS attributes to correct value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.QuickSetValue">
            <summary>
            For fast DOM creation - since styles are not indexed or validated.
            If they are ever accessed by style name, they will be parsed on demand.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.HasStyles">
            <summary>
            True if there is at least one style.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Item(System.String)">
            <summary>
            Get or set the named style
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Item(System.String,System.Boolean)">
            <summary>
            Get or set the named style, optionally enabling strict mode
            </summary>
            <param name="name"></param>
            <param name="strict"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CsQuery.IDomInnerText" -->
        <member name="T:CsQuery.IDomDocument">
            <summary>
            An interface to a Document that represents an HTML document.
            </summary>
        </member>
        <member name="M:CsQuery.IDomDocument.GetElementById(System.String)">
             <summary>
             Returns a reference to the element by its ID.
             </summary>
            
             <param name="id">
             The identifier.
             </param>
            
             <returns>
             The element by identifier.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.getElementById
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateElement(System.String)">
             <summary>
             Creates the specified HTML element.
             </summary>
            
             <param name="nodeName">
             Name of the node.
             </param>
            
             <returns>
             The new element.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createElement
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateTextNode(System.String)">
             <summary>
             Creates a new Text node.
             </summary>
            
             <param name="text">
             The text.
             </param>
            
             <returns>
             The new text node.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createTextNode
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.CreateComment(System.String)">
             <summary>
             Creates a new comment.
             </summary>
            
             <param name="comment">
             The comment.
             </param>
            
             <returns>
             The new comment.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/document.createComment
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.QuerySelector(System.String)">
             <summary>
             Returns the first element within the document (using depth-first pre-order traversal of the
             document's nodes) that matches the specified group of selectors.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             An element, the first that matches the selector.
             </returns>
            
             <url>
             https://developer.mozilla.org/En/DOM/Document.querySelector
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.QuerySelectorAll(System.String)">
             <summary>
             Returns a list of the elements within the document (using depth-first pre-order traversal of
             the document's nodes) that match the specified group of selectors.
             </summary>
            
             <param name="selector">
             The selector.
             </param>
            
             <returns>
             A sequence of elements matching the selector.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/Document.querySelectorAll
             </url>
        </member>
        <member name="M:CsQuery.IDomDocument.GetElementsByTagName(System.String)">
             <summary>
             Returns a list of elements with the given tag name. The subtree underneath the specified
             element is searched, excluding the element itself.
             </summary>
            
             <remarks>
             Unlike the browser DOM version, this list is not live; it will represent the selection at the
             time the query was run.
             </remarks>
            
             <param name="tagName">
             Name of the tag.
             </param>
            
             <returns>
             The element by tag name.
             </returns>
            
             <url>
             https://developer.mozilla.org/en/DOM/element.getElementsByTagName
             </url>
        </member>
        <member name="P:CsQuery.IDomDocument.DocumentIndex">
            <summary>
            An interface to the internal indexing methods. You generally should not use this.
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.DocTypeNode">
            <summary>
            Gets the document type node for this document, or null if none exists.
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.DocType">
            <summary>
            Returns the document type of this document. If no DOCTYPE node exists, this will return the default
            document type defined through the CsQuery.Options variable.
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.DomRenderingOptions">
            <summary>
            Gets or sets options for controlling how the output is rendered. All options are flags so
            multiple values can be set with "option1 | option2 ...".
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.Body">
            <summary>
            Return the body element for this Document.
            </summary>
        </member>
        <member name="M:CsQuery.IAttributeCollection.GetAttribute(System.String)">
            <summary>
            Get the value of a named attribute
            </summary>
            <param name="name">The attribute name</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:CsQuery.IAttributeCollection.SetAttribute(System.String,System.String)">
            <summary>
            Set the value of a named attribute
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:CsQuery.IAttributeCollection.Item(System.String)">
            <summary>
            Get or set the value of a named attribute
            </summary>
            <param name="attributeName">The attribute name</param>
            <returns>The attribute value</returns>
            <returntype>string</returntype>
        </member>
        <member name="P:CsQuery.IAttributeCollection.Length">
            <summary>
            The number of attributes in this attribute collection. This includes special attributes such as
            "class", "id", and "style"
            </summary>
            <returntype>int</returntype>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.AlphaISO10646">
            <summary>
            Indicates that a character is alphabetic-like character defined as a-z, A-Z, hyphen, underscore, and ISO 10646 code U+00A1 and higher.
            (per characters allowed in CSS identifiers)
            </summary>
        </member>
        <member name="T:CsQuery.Web.AsyncWebRequest">
            <summary>
            A class encapsulating the functionality needed to make requests of remote web servers, and return the HTML as a CQ object.
            </summary>
        </member>
        <member name="T:CsQuery.Web.ICsqWebRequestMetadata">
            <summary>
            Data about a web request
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequestMetadata.Timeout">
            <summary>
            The time, in milliseconds, after which to abort an incompete request.
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequestMetadata.UserAgent">
            <summary>
            The UserAgent string to present to the remote server
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequest.Url">
            <summary>
            The url to load
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequest.Dom">
            <summary>
            The CQ object representing the contents of the URL
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequest.Complete">
            <summary>
            Returns true when this request has finished processing
            </summary>
        </member>
        <member name="P:CsQuery.Web.ICsqWebRequest.Id">
            <summary>
            A unique ID for this request. This will be automatically generated if not assigned.
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequest.GetDocument">
            <summary>
            Return a CQ object, treating the HTML as a complete document
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequest.GetContent">
            <summary>
            Return a CQ object, treating the HTML as content
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequest.GetAsync">
            <summary>
            Being the async request
            </summary>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.CallbackSuccess">
            <summary>
            Delegate to invoke upon successful completion of a request
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.CallbackFail">
            <summary>
            Delegate to invoke when a request fails
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Id">
            <summary>
            A unique identifier for this request
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Url">
            <summary>
            The URL of the request
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Timeout">
            <summary>
            Time, in milliseconds, after which a web request will be aborted.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.UserAgent">
            <summary>
            Get or set the user agent string used when the request is made
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Started">
            <summary>
            The time that the async request was initiated.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Finished">
            <summary>
            The time that the async request was completed
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Complete">
            <summary>
            Indicates that an async request has completed.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Success">
            <summary>
            True if the WebRequest was completed successfully.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.WebException">
            <summary>
            When a request fails, contains the exception raised.
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Html">
            <summary>
            Return the Html response from the request
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncWebRequest.Dom">
            <summary>
            Return a document from the HTML web request result. DEPRECATED. use GetDocument() instead.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomInnerText">
            <summary>
            Used for literal text (not part of a tag)
            </summary>
        </member>
        <member name="M:CsQuery.Web.WebForms.CreateFromRender(System.Web.UI.Page,System.Action{System.Web.UI.HtmlTextWriter},System.Web.UI.HtmlTextWriter)">
            <summary>
            Creates a new CsQueryHttpContext object bound to an ASP.NET WebForms page
            </summary>
            <param name="page">The current System.Web.UI.Page</param>
            <param name="renderMethod">The delegate to the base render method</param>
            <param name="writer">The HtmlTextWriter to output the final stream (the parameter passed to the Render method)</param>
            <returns>A context which can be used to complete the Render after any manipulation with CsQuery</returns>
        </member>
        <member name="M:CsQuery.Web.WebForms.CreateFromRender(System.Web.UI.Page,System.Action{System.Web.UI.HtmlTextWriter},System.Web.UI.HtmlTextWriter,System.Web.HttpContext)">
            <summary>
            Creates a new CSQuery object from a Page.Render method. The base Render method of a page should be overridden,
            and this called from inside it to configure the CsQUery
            </summary>
            <param name="page">The current System.Web.UI.Page</param>
            <param name="renderMethod">The delegate to the base render method</param>
            <param name="writer">The HtmlTextWriter to output the final stream (the parameter passed to the Render method)</param>
            <returns>A context which can be used to complete the Render after any manipulation with CsQuery</returns>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.EscapedString">
            <summary>
            Match a string pattern against a particular character validation function, but allow the backslash to escape 
            any character.
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.IOperation.ReplaceLastOperand(CsQuery.EquationParser.IOperand)">
            <summary>
            Replaces the last item 
            </summary>
            <param name="operand"></param>
        </member>
        <member name="T:CsQuery.ExtensionMethods.ExtensionMethods">
            <summary>
            Some extension methods that come in handy when working with CsQuery
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.RegexTest(System.String,System.String)">
            <summary>
            Test whether the regular expression pattern matches the string
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.CloneList(System.Collections.IEnumerable)">
            <summary>
            (Alpha) Clone a sequence of objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.CloneList(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            (Alpha) Deep clone a sequence of objects.
            </summary>
            <param name="obj"></param>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ToJSON(System.Object)">
            <summary>
            Serailize the object to a JSON string
            </summary>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ParseJSON``1(System.String)">
            <summary>
            Deserialize the JSON string to a typed object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ParseJSON(System.String)">
            <summary>
            Deserialize the JSON string to an ExpandoObject or value type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.HasProperty(System.Dynamic.DynamicObject,System.String)">
            <summary>
            Indicates whether a property exists on an ExpandoObject
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Get``1(System.Dynamic.DynamicObject,System.String)">
            <summary>
            Return a typed value from a dynamic object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Slice(System.Array,System.Int32,System.Int32)">
             <summary>
             Reduce the set of matched elements to a subset beginning with the 0-based index provided.
             </summary>
            
             <param name="array">
             The array to act on.
             </param>
             <param name="start">
             The 0-based index at which to begin selecting.
             </param>
             <param name="end">
             The 0-based index of the element at which to stop selecting. The actual element at this
             position is not included in the result.
             </param>
            
             <returns>
             A new array of the same type as the original.
             </returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Slice(System.Array,System.Int32)">
             <summary>
             Reduce the set of matched elements to a subset beginning with the 0-based index provided.
             </summary>
            
             <param name="array">
             The array to act on.
             </param>
             <param name="start">
             The 0-based index at which to begin selecting.
             </param>
            
             <returns>
             A new array of the same type as the original.
             </returns>
        </member>
        <member name="T:CsQuery.JsObject">
            <summary>
            A dynamic object implementation that differs from ExpandoObject in two ways:
            
            1) Missing property values always return null (or a specified value)
            2) Allows case-insensitivity
            
            </summary>
        </member>
        <member name="M:CsQuery.JsObject.GetList``1(System.String)">
            <summary>
            Try to return a li
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Engine.NthChild">
            <summary>
            Figure out if an index matches an Nth Child, or return a list of all matching elements from a list.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.NthChild.IndexMatches(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Return true if the index matches the formula provided
            </summary>
            <param name="index"></param>
            <param name="formulaText"></param>
            <param name="onlyNodeName">Only include nodes of this type</param>
            <param name="fromLast">Count from the last element instead of the first</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.GetMatchingChildren(CsQuery.IDomElement,System.String,System.String,System.Boolean)">
            <summary>
            Return nth children that match type
            </summary>
            <param name="obj">The parent object</param>
            <param name="formula">The formula for determining n</param>
            <param name="onlyNodeName">The type of node to match</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.GetEffectiveChild(CsQuery.INodeList,System.Int32,System.Boolean)">
            <summary>
            Return the correct child from a list based on an index, and the fromLast setting
            </summary>
            <param name="nodeList"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.GetEffectiveChild(CsQuery.INodeList,System.Int32)">
            <summary>
            Return the correct child from a list based on an index, and the current "FromLast" setting
            </summary>
            <param name="nodeList"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.ParseEquation(System.String)">
            <summary>
            Parse the equation text into in IEquation, or obtain from the cache if available
            </summary>
            <param name="equationText"></param>
        </member>
        <member name="M:CsQuery.Engine.NthChild.CheckForSimpleNumber(System.String)">
            <summary>
            Check if it was just a number passed (not an equation) and assign the correct delegates to matching
            </summary>
            <param name="equation"></param>
        </member>
        <member name="M:CsQuery.Engine.NthChild.GetEquation(System.String)">
            <summary>
            Returns a parsed equation from a string, validating that it appears to be a legitimate nth-child equation
            </summary>
            <param name="equationText"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.CheckForEvenOdd(System.String)">
            <summary>
            Replaces _Text with the correct equation for "even" and "odd"
            </summary>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.UpdateCacheInfo(System.Int32)">
            <summary>
            Get the next matching index using the equation and add it to our cached list of equation results
            </summary>
            <param name="lastIndex"></param>
        </member>
        <member name="P:CsQuery.Engine.NthChild.IsJustNumber">
            <summary>
            When true, the current equation is just a number, and the MatchOnlyIndex value should be used directly
            </summary>
        </member>
        <member name="P:CsQuery.Engine.NthChild.OnlyNodeName">
            <summary>
            Only nodes with this name will be included in the count to determine if an index matches the equation
            </summary>
        </member>
        <member name="P:CsQuery.Engine.NthChild.Text">
            <summary>
            The formula for this nth child selector
            </summary>
        </member>
        <member name="T:CsQuery.Engine.NthChild.CacheInfo">
            <summary>
            A structure to keep information about what has been calculated so far for a given equation string.
            NthChild is expensive so we cache a list of matching element IDs for a given equation along with the 
            last index this list represents and the iteration. The next time it's called we can either reference
            the list of matches so far, or update it only from the point where we stopped last time.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HTMLAttributeName.IsValidAttributeName(System.Int32,System.Char)">
            <summary>
            Match a pattern for am attribute name selector
            </summary>
            <param name="index"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.EquationParser.OrderedDictionary`2">
            <summary>
            Default implementation of OrderedDictionary-T,TKey,TValue-
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:CsQuery.EquationParser.OrderedDictionary`3">
            <summary>
            A dictionary that also maintains the order added.
            </summary>
            <typeparam name="T">The concrete type of dictionary to use for the inner dictionary</typeparam>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:CsQuery.EquationParser.OrderedDictionary`3.IndexOf(`1)">
            <summary>
            This class is optimized for access by numeric index, or accessing an object by key. If there's a frequent 
            need to obtain the numeric index from the key then this should have another dictionary added to xref.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.OrderedDictionary`3.Insert(System.Int32,`2)">
            <summary>
            Insert an item by value only. Dup values are possible this way, it will have a key equal to the string of its index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:CsQuery.EquationParser.OrderedDictionary`3.Item(`1)">
            <summary>
            Setting uses indexOf - not optimized.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.EquationParser.IFunction`1">
            <summary>
            T is the output type of the function.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Forms.ExtensionMethods">
            <summary>
            Extension methods for use in form manipulation
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormValue(CsQuery.CQ,System.String)">
            <summary>
            Get the value for a particular form element identified by "#ID" or "name". This method will create a selector
            that identifies any input, select, button or textarea element by name attribute (if not passed an ID selector)
            </summary>
            <typeparam name="T">The datatype that should be returned</typeparam>
            <param name="obj">The CsQuery object to which this applies</param>
            <param name="name">The name of the input element</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormValue``1(CsQuery.CQ,System.String)">
            <summary>
            Get the value for a particular form element identified by "#ID" or "name"
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormElement(CsQuery.CQ,System.String)">
            <summary>
            Return an element identified by "#id" or "name". (Special case selector to simplify accessing form elements).
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ)">
            <summary>
            (BETA) Update form values from the HTTP post data in the current HttpContext
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ,System.Collections.Specialized.NameValueCollection)">
            <summary>
            (BETA) Update form values from the data in collection provided
            </summary>
            <param name="obj"></param>
            <returns>A CQ object with all form elements searched</returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ,System.Web.HttpContext)">
            <summary>
            (BETA) Update form values from the data in httpContext.Request.Form
            </summary>
            <param name="obj"></param>
            <returns>A CQ object with all form elements searched</returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestoreData(CsQuery.IDomElement,CsQuery.CQ,System.String)">
            <summary>
            Restore "value" to a single element
            </summary>
            <param name="e"></param>
            <param name="csQueryContext"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.CreateDropDown(CsQuery.CQ,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Build a dropdown list for each element in the selection set using name/value pairs from data.
            Note tha the "key" becomes the "value" on the element, and the "value" becomes the text assocaited
            with it.
            </summary>
            <param name="selection"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.CreateDropDownFromEnum``1(CsQuery.CQ,System.String,System.Boolean)" -->
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.ToggleDisabled(CsQuery.CQ,System.Boolean)">
            <summary>
            Adds or removes the "enabled" property based on the parameter value
            </summary>
            <param name="selection"></param>
            <param name="addRemoveSwitch"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.EquationParser.Implementation.Utils.IsNumericType(System.Type)" -->
        <member name="M:CsQuery.EquationParser.Implementation.Utils.IsNumericConvertible(System.Type)">
            <summary>
            Any primitive type that can be converted to a number, e.g. all except string. This just
            returns any primitive type that is not IEnumerable
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.EnsureOperand(System.IConvertible)">
            <summary>
            If the value is an operand, returns it, otherwise creates the right kind of operand
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.GetUnderlyingType(System.Type)">
            <summary>
            Return the proper type for an object (ignoring nullability)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.IsNullableType(System.Type)">
            <summary>
            Returns true of the type is a generic nullable type OR string
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Literal`1.SetConvert(System.IConvertible)">
            <summary>
            This is static so it can be used by the constructors -- sets the value of the strongly typed instance
            </summary>
            <param name="literal"></param>
            <param name="value"></param>
        </member>
        <member name="T:CsQuery.Utility.DomStyles">
            <summary>
            A dictionary of valid styles, based on a Visual Studio format XML schema. 
            </summary>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.Select(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Select from the bound Document using index. First non-class/tag/id selector will result in this being passed off to GetMatches
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetSelectionSource(CsQuery.Engine.SelectorClause,System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Get the sequence that is the source for the current clause, based on the selector, prior results, and context.
            </summary>
            <param name="selector"></param>
            <param name="lastResult"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetMatches(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Engine.SelectorClause)">
            <summary>
            Return all elements matching a selector, within a domain baseList, starting from list.
            This function will traverse children, but it is expected that the source (e.g. from an Adjacent
            or Sibling selector) is correct.
            </summary>
            <param name="baseList"></param>
            <param name="list"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.Has(CsQuery.Engine.Selector,CsQuery.IDomObject)">
            <summary>
            Returns true if the element contains items matching the selector
            </summary>
            <param name="selector"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.Matches(CsQuery.Engine.Selector,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all elements that match the selector
            </summary>
            <param name="selector"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.Matches(CsQuery.Engine.SelectorClause,CsQuery.IDomObject)">
            <summary>
            Return true if the element matches the selector. Anything other than "all" or filter-type selectors will return false.
            </summary>
            <param name="selector"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.Matches(CsQuery.Engine.SelectorClause,CsQuery.IDomObject,System.Int32)">
            <summary>
            Return true if an object matches a specific selector. If the selector has a desecendant or child traversal type, it must also
            match the specificed depth.
            </summary>
            <param name="selector">The jQuery/CSS selector</param>
            <param name="obj">The target object</param>
            <param name="depth">The depth at which the target must appear for descendant or child selectors</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetResultPositionMatches(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Engine.SelectorClause)">
            <summary>
            Return all position-type matches. These are selectors that are keyed to the position within the selection
            set itself.
            </summary>
            <param name="sourceList"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetPseudoClassMatches(CsQuery.IDomElement,CsQuery.Engine.SelectorClause)">
            <summary>
            Return all child elements matching a DOM-position type selector
            </summary>
            <param name="elm"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.MatchesPseudoClass(CsQuery.IDomElement,CsQuery.Engine.SelectorClause)">
            <summary>
            Return true if an element matches a specific DOM position-type filter
            </summary>
            <param name="elm"></param>
            <param name="type"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetAdjacentOrSiblings(CsQuery.Engine.TraversalType,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Map a list to its siblings or adjacent elements if needed. Ignore other traversal types.
            </summary>
            <param name="traversalType"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetAllChildOrDescendants(CsQuery.Engine.TraversalType,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Map a list to its children or descendants, if needed.
            </summary>
            <param name="traversalType"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetChildElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all children of each element in the list
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetDescendantElements(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all descendants of each element in the list
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.ContainsText(CsQuery.IDomElement,System.String)">
            <summary>
            Return true if any text node descendant of the source element contains the specified text
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Engine.CssSelectionEngine.Selectors">
            <summary>
            The current selection list being acted on
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.HtmlID">
            <summary>
            ID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed by any number of letters, 
            digits ([0-9]), hyphens ("-"), underscores ("_"), colons (":"), and periods (".").
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HtmlID.IsValidID(System.Int32,System.Char)">
            <summary>
            Match a pattern for a valid HTML ID 
            </summary>
            <param name="index"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlElementFactory.GenerateOptionalElements">
            <summary>
            When true, HTML5 optional elements will be created automatically. This spefically excludes 
            HTML, HEAD, TITLE, and BODY. Use IsFragment=true to create those.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlElementFactory.WrapRootTextNodes">
            <summary>
            When true, text nodes that are not the child of another elment will be wrapped in SPAN tags
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlElementFactory.ParseAsDocument">
            <summary>
            Parse with options for a full HTML document. Not that this method WILL NOT handle stranded text nodes (outside
            Body) right now. This only works with ParseToDocument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlElementFactory.ParseAsFragment">
            <summary>
            Parse with options for fragment
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlElementFactory.ParseAsContent">
            <summary>
            Parse with options for content (generate most optional elements but not document wrapping HTML/BODY)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlElementFactory.Parse">
            <summary>
            Parse the HTML, and return it, based on options set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlElementFactory.ParseToDocument">
            <summary>
            Parse the HTML into the bound document
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlElementFactory.ReorganizeStrandedTextNodes">
            <summary>
            In the future I will update the parser to do this directly, since this requires binding to a Document to work.
            </summary>
        </member>
        <member name="P:CsQuery.HtmlParser.HtmlElementFactory.IsDocument">
            <summary>
            When true, HTML5 optional elements will be created automatically. This should be false for fragments.
            </summary>
        </member>
        <member name="T:CsQuery.Web.AsyncPostbackData">
            <summary>
            Represents async data from an ASP.NET webforms UpdatePanel
            </summary>
        </member>
        <member name="M:CsQuery.Web.AsyncPostbackData.Create(System.Int32,System.String,System.String,System.String)">
            <summary>
            Populate the content from a ASP.NET updatepanel data block
            </summary>
            <param name="length"></param>
            <param name="type"></param>
            <param name="id"></param>
            <param name="content"></param>
        </member>
        <member name="M:CsQuery.Web.AsyncPostbackData.Render">
            <summary>
            Output this data block, recalulating the lengtht parameter based on the new output
            </summary>
            <returns>HTML string</returns>
        </member>
        <member name="T:CsQuery.Implementation.DomFragment">
            <summary>
            Special node type to represent the DOM.
            THIS IS NOT USED YET
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomDocument">
            <summary>
            Special node type to represent the DOM.
            </summary>
        </member>
        <member name="T:CsQuery.IDomIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:CsQuery.IDomIndex.AddToIndex(System.String,CsQuery.IDomIndexedNode)">
             <summary>
             Adds an element to the index.
             </summary>
            
             <param name="key">
             The index key. This should be a unique path to the element in the Document tree. The format
             is determined by environmental settings. This is for internal use.
             </param>
             <param name="element">
             The element.
             </param>
        </member>
        <member name="P:CsQuery.IDomIndex.SelectorXref">
            <summary>
            The primary selection index.
            </summary>
        </member>
        <member name="P:CsQuery.IDomIndex.Data">
            <summary>
            Any user data to be persisted with this DOM.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.#ctor">
            <summary>
            Create a new, empty DOM document
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Create a new document from a sequence of elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.#ctor(System.Char[])">
            <summary>
            Create a new document from a character array of html
            </summary>
            <param name="html"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.AddToIndex(CsQuery.IDomIndexedNode)">
            <summary>
            Add an element to the index using the default keys for this element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.AddToIndex(System.String,CsQuery.IDomIndexedNode)">
            <summary>
            Add an element to the index using a specified index key
            </summary>
            <param name="key"></param>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.RemoveFromIndex(CsQuery.IDomIndexedNode)">
            <summary>
            Remove an element from the index
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.RemoveFromIndex(System.String)">
            <summary>
            Remove an element from the index using its key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.QueryIndex(System.String,System.Int32,System.Boolean)">
            <summary>
            Query the document's index for a subkey up to a specific depth, optionally including descendants that match the selector
            </summary>
            <param name="subKey"></param>
            <param name="depth">The zero-based depth to which searches should be limited</param>
            <param name="includeDescendants"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.DomDocument.QueryIndex(System.String)">
            <summary>
            Query the document's index for a subkey
            </summary>
            <param name="subKey"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.DocumentIndex">
            <summary>
            Exposes the Document as an IDomIndex object
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.SelectorXref">
            <summary>
            The index
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.Depth">
            <summary>
            The depth in the node tree at which this node occurs. This is always 0 for the DomDocument.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.DocType">
            <summary>
            Gets the DocType for this node. This can be changed through the DomDocument
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomFragment.IsIndexed">
            <summary>
            Gets a value indicating whether this object is indexed. 
            </summary>
        </member>
        <member name="T:CsQuery.Utility.JsonSerializer">
            <summary>
            TODO: This class needs some help. While not thrilled about the idea of writing another JSON serializer,
            CsQuery does some unique handling for serialization &amp;  deserialization, e.g. mapping sub-objects to expando objects. 
            
            We can do a post-op parsing from 
            any other JSON serializer (such as we are doing now) but this doubles the overhead required. Look at a customized implementation from 
            Newtonsoft, though any customization makes it difficult to use a simple strategy for drop-in replacement of the serializer. Perhaps 
            implement an interface for a serializer wrapper class that lets us pass any generic serializer that performs needed post-op
            substitutions as part of the base library, with an optimized native implementation?
            </summary>
        </member>
        <member name="F:CsQuery.Utility.JsonSerializer._Serializer">
            <summary>
             The real serializer implementation. We need to set up a DI contiainer to manage this (see todo above)
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.CssClassName.IsValidClassName(System.Int32,System.Char)">
            <summary>
            Match a pattern for a CSS class name selector
            TODO - doesn't validate hyphen-digit combo.
            </summary>
            <param name="index"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.INodeList.AddRange(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
             <summary>
             Adds a sequence of elements to the end of this INodeList
             </summary>
            
             <param name="elements">
             An IEnumerable&lt;IDomObject&gt; of items to append to this.
             </param>
        </member>
        <member name="M:CsQuery.INodeList.AddAlways(CsQuery.IDomObject)">
             <summary>
             Add a node but do not attempt to clean up duplicate IDs or remove it from an existing DOM.
             This is required for the parser, but normally when you are using "Add" you want it to removed
             the ID from disconnected elements. This can also result in nodes appearing in more than one
             place in the DOM and should generally not be used by clients.
             
             This may be used by end users, but should be used with caution.
             </summary>
            
             <param name="item">
             The object to add to this INodeList
             </param>
        </member>
        <member name="P:CsQuery.INodeList.Length">
            <summary>
            The number of nodes in this INodeList
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.Add(CsQuery.IDomObject)">
            <summary>
            Add a child to this element 
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.AddAlways(CsQuery.IDomObject)">
            <summary>
            Add a child without validating that a node is a member of this DOM already or that the ID is unique
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.Insert(System.Int32,CsQuery.IDomObject)">
            <summary>
            Adds a child element at a specific index
            </summary>
            <param name="index"></param>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from this list and update index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.Remove(CsQuery.IDomObject)">
            <summary>
            Remove an element from this element's children
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.Clear">
            <summary>
            Remove all children of this node
            </summary>
        </member>
        <member name="T:CsQuery.Engine.MatchElement">
            <summary>
             Wrapper class used by the engine to store info on the selector stack.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomDocumentType">
            <summary>
            A special type for the DOCTYPE node
            </summary>
        </member>
        <member name="T:CsQuery.IDomDocumentType">
            <summary>
            DOCTYPE node
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Equations.CreateEquationOperand(System.String)">
            <summary>
            Create an operand by parsing a string. Like CreateEquation but does not wrap in an Equation object.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Utility.SelectionSetComparer">
            <summary>
            A comparer to ensure that items are returned from a selection set in DOM order, e.g. by comparing their
            internal paths.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Patterns.HTMLTagSelectorName.IsValidTagName(System.Int32,System.Char)">
            <summary>
            Match a pattern for am attribute name selector
            </summary>
            <param name="index"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.Bounded">
            <summary>
            Matches anything that is bounded by accepted bounding characters
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.ExtensionMethods.ExtensionMethods">
            <summary>
            Extension methods used by CsQuery but not specialized enough to be considered useful for clients; therefore
            in a separate namespace.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.ExtensionMethods.ExtensionMethods.SubstringBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the text between startIndex and endIndex (exclusive of endIndex)
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.EquationParserEngine.Error">
            <summary>
            Error (if any) that occurred while parsing
            </summary>
        </member>
        <member name="T:CsQuery.Utility.JSON">
            <summary>
            Methods for working with JSON. 
            </summary>
            
        </member>
        <member name="M:CsQuery.Utility.JSON.ToJSON(System.Object)">
            <summary>
            Convert an object to JSON using the default handling of the serializer
            </summary>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON``1(System.String)">
            <summary>
            Parse JSON into a typed object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON(System.String,System.Type)">
            <summary>
            Parse JSON into a typed object
            </summary>
            <param name="objectToDeserialize"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON(System.String)">
            <summary>
            Parse JSON into a dynamic object, or single typed value
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONValue(System.String)">
            <summary>
            Parse a JSON value to a C# value (string,bool, int, double, datetime) or, if the value is another object, an object or array.
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONValue(System.String,System.Type)">
            <summary>
            Parse a JSON value to a C# value of the type requested
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonDate(System.String)">
            <summary>
            The value represents a JSON date (MS format)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonObject(System.String)">
            <summary>
            The value represents a JSON object, e.g. is bounded by curly braces
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonString(System.String)">
            <summary>
            The value represents a JSON string, e.g. is bounded by double-quotes
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonArray(System.String)">
            <summary>
            The value represents a JSON array, e.g. is bounded by square brackets
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.TryParseJsonValueImpl(System.String,System.Object@)">
            <summary>
            Try to parse a JSON value into a value type or, if the value represents an object or array, an object. This method does not
            address numeric types, leaving that up to a caller, so that they can map to specific numeric casts if desired.
            </summary>
            <param name="objectToDeserialize"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONObject(System.String)">
            <summary>
            Deserialize javscript, then transform to an ExpandObject
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.#ctor(System.String)">
            <summary>
            Create a new selector from any string
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:CsQuery.Engine.Selector.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Create a new selector from DOM elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:CsQuery.Engine.Selector.Insert(System.Int32,CsQuery.Engine.SelectorClause,CsQuery.Engine.CombinatorType)">
            <summary>
            Insert a selector clause at the specified position
            </summary>
            <param name="index"></param>
            <param name="selector"></param>
        </member>
        <member name="M:CsQuery.Engine.Selector.Filter(CsQuery.IDomDocument,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return only elements matching this selector
            </summary>
            <param name="document"></param>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Matches(CsQuery.IDomDocument,CsQuery.IDomObject)">
            <summary>
            Test if a single element matches this selector
            </summary>
            <param name="document"></param>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.Except(CsQuery.IDomDocument,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return only elements from the sequence that do not match this selector.
            </summary>
            <param name="document"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.Selector.GetFilterSelector">
            <summary>
            Returns a clone of this selector with all "root" combinators mapped to "filter", e.g. so it can be applied to 
            a sequence.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.Selector.Clone">
            <summary>
            Return a clone of this selector
            </summary>
            <returns></returns>
        </member>
        <member name="T:CsQuery.OutputFormatters.FormatPlainText">
            <summary>
            Removes all extraneous whitespace
            </summary>
        </member>
        <member name="T:CsQuery.Engine.SelectorParser">
            <summary>
            A class to parse a CSS selector string into a sequence of Selector objects
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.Parse(System.String)">
            <summary>
            Parse the string, and return a sequence of Selector objects
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.expectsOptionallyQuotedValue">
            <summary>
            A pattern for the operand of an attribute selector
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.SelectorType)">
            <summary>
            Start a new chained filter selector of the specified type
            </summary>
            <param name="positionType"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.CombinatorType,CsQuery.Engine.TraversalType)">
            <summary>
            Start a new selector that does not yet have a type specified
            </summary>
            <param name="combinatorType"></param>
            <param name="traversalType"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.TraversalType)">
            <summary>
            Start a new chained selector that does not yet have a type specified
            </summary>
            <param name="traversalType"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.SelectorType,CsQuery.Engine.CombinatorType,CsQuery.Engine.TraversalType)">
            <summary>
            Close the currently active selector. If it's partial (e.g. a descendant/child marker) then merge its into into the 
            new selector created.
            </summary>
            <param name="selectorType"></param>
            <param name="combinatorType"></param>
            <param name="traversalType"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.FinishSelector">
            <summary>
            Finishes any open selector and clears the current selector
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.ClearCurrent">
            <summary>
            Clear the currently open selector
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.IsHtml(System.String)">
            <summary>
            Return true of the text appears to be HTML (e.g. starts with a caret)
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Web.IAsyncRequestQueue">
            <summary>
            A group of async web requests. 
            </summary>
            
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.StartAsyncWebRequest(System.String,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
            <summary>
            Start an async request, and return a unique ID that identifies it.
            </summary>
            <param name="url"></param>
            <param name="success"></param>
            <param name="fail"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.WaitForAsyncEvents(System.Int32)">
            <summary>
            Waits until all async events have completed. Use for testing primarily as a web app should not stop normally.
            </summary>
            <param name="millisecondsTimeout">The maximum number of milliseconds to wait</param>
            <returns>true if all events were cleared in the allotted time, false if not</returns>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.CancelAsyncEvents">
            <summary>
            Cancel all outstanding async events
            </summary>
        </member>
        <member name="T:CsQuery.Utility.AttributeDictionary">
            <summary>
            Alternate implementation of the IDictionary for attributes that uses no objects to see if this is important for performance.
            (It doesn't seem to be). Not used as of 6/15/2012
            </summary>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassType">
            <summary>
            Position-type selectors match one or more element children of another element. The selection engine can either access all 
            matching children, or test a particular element for matching a selector
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.MatchFunctions">
            <summary>
            Match functions. These are used with StringScanner to parse out expected strings. A basic
            match function accepts an int and a char, and is eand returns true as long as the character
            is valid for that position in the string. Many patterns have different valid first characters
            versus later characters. The function will be called beginning with index zero, and continue
            to be called until it returns false, indicating that the end of a pattern that matches that
            concept has been reached.
            
            More complex patterns require a memory of the previous state, for example, to know whether
            quoting is in effect. the IExpectPattern interface describes a class to match more complex
            patterns.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.Alpha(System.Int32,System.Char)">
             <summary>
             Return true while the string is alphabetic, e.g. contains only letters.
             </summary>
            
             <param name="index">
             Zero-based index of the current position in the string.
             </param>
             <param name="character">
             The character at the current position.
             </param>
            
             <returns>
             True if the current character is valid for this pattern, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.Number(System.Boolean)">
             <summary>
             Returns a pattern that matches numbers.
             </summary>
            
             <param name="requireWhitespaceTerminator">
             (optional) when true, only whitespace can terminate this number. When false, any non-numeric character will succesfully terminate the pattern.
             </param>
            
             <returns>
             The total number of ber.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.PseudoSelector(System.Int32,System.Char)">
             <summary>
             A matching function that validates 
             </summary>
            
             <param name="index">
             Zero-based index of the.
             </param>
             <param name="character">
             The character.
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="P:CsQuery.StringScanner.MatchFunctions.CssClassName">
             <summary>
             Matches a valid CSS class: http://www.w3.org/TR/CSS21/syndata.html#characters Does not
             currently deal with escaping though.
             </summary>
            
             <value>
             The name of the CSS class.
             </value>
        </member>
        <member name="T:CsQuery.HtmlParser.HtmlStyles">
            <summary>
            A dictionary of valid styles, based on a Visual Studio format XML schema. 
            </summary>
        </member>
        <member name="T:CsQuery.Utility.IRangeSortedDictionary`1">
            <summary>
            A sorted dictionary that allows lookup by range.
            </summary>
        </member>
        <member name="M:CsQuery.Utility.IRangeSortedDictionary`1.GetRangeKeys(System.String)">
            <summary>
            Return all keys starting with subKey
            </summary>
            <param name="subKey">The substring to match</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.IRangeSortedDictionary`1.GetRange(System.String)">
            <summary>
            Return all values having keys beginning with subKey
            </summary>
            <param name="subKey"></param>
            <returns></returns>
        </member>
        <member name="F:CsQuery.Promises.WhenAll.Success">
            <summary>
            When false, means one or more of the promises was rejected, and the All will be rejected
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Set(System.String,System.String)">
            <summary>
            Adding an attribute implementation
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Set(System.UInt16,System.String)">
            <summary>
            Second to last line of defense -- will call back to owning Element for attempts to set class, style, or ID, which are 
            managed by Element.
            </summary>
            <param name="tokenId"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.SetRaw(System.UInt16,System.String)">
            <summary>
            Used by DomElement to (finally) set the ID value
            </summary>
            <param name="tokenId"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.SetBoolean(System.String)">
            <summary>
            Sets a boolean only attribute having no value
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CsQuery.Implementation.AttributeCollection.Unset(System.String)">
            <summary>
            Removing an attribute implementation
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Utility.SimpleDictionary`1">
            <summary>
            Just convers a NameValueCollection to a dictionary with few methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.Clone">
            <summary>
            The values set (on order that each variable appears first in the equation) for each varaiable
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.SetVariable(System.String,System.IConvertible)">
            <summary>
            Sets the value used for a variable when the function is next run
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.GetValue(System.IConvertible[])">
            <summary>
            Set the paramenters in order to the values passed, and returns the result of the equation
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Equation.VariableValues">
            <summary>
            The names of the variables in the order added. For functions (where the parameters are passed only by order)
            this is important. Probably could move this to the Function implementation
            but it requires overriding everything, almost easier to keep it here.
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Equation.Operand">
            <summary>
            The root operand for the equation. The equation must not be changed once set, or variables will not be bound.
            </summary>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Get">
            <summary>
            Initiate an http GET request
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Post">
            <summary>
            Initiaite an http POST request
            </summary>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Web.CsqWebRequest.Timeout">
            <summary>
            The time, in milliseconds, after which to abort an incomplete request.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.OptionallyQuoted">
            <summary>
            Match an attribute value. Should be quoted but doesn't have to be.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Patterns.OptionallyQuoted.Terminators">
            <summary>
            When unquoted, this will terminate the string
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.CharacterData">
            <summary>
            A static class to provide attribute information about characters, e.g. determining whether or not it
            belongs to a number of predefined classes. This creates an array of every possible character with a 
            uint that is a bitmap (of up to 32 possible values)
            This permits very fast access to this information since it only needs to be looked up
            via an index. Uses an array of 65536 uints = 256K of memory
            
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.#cctor">
            <summary>
            Configuration of the xref of character info
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlIdNameExceptStart(System.UInt32)">
            <summary>
            Matches anything but the first character for a valid ID or name value. The first character is just alpha.
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagSelectorStart(System.UInt32)">
            <summary>
            We omit ":" as a valid name start character because it makes pseudoselectors impossible to parse.
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagSelectorExceptStart(System.UInt32)">
            <summary>
            Similar to above, we omit "." as a valid in-name char because it breaks chained CSS selectors.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagNameStart(System.UInt32)">
            <summary>
            Add the : back in when actually parsing html
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagNameExceptStart(System.UInt32)">
            <summary>
            Add the . back in when actually parsing html
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.Closer(System.Char)">
            <summary>
            Return the closing character for a set of known opening enclosing characters
            (including single and double quotes)
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.MatchingBound(System.Char)">
            <summary>
            Return the matching bound for known opening and closing bound characters (same as Closer,
            but accepts closing tags and returns openers)
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Web.ServerConfig">
            <summary>
            Configuration opttions used when accessing remote resources
            </summary>
        </member>
        <member name="M:CsQuery.Web.ServerConfig.#cctor">
            <summary>
            Configure the "default default" settings
            </summary>
        </member>
        <member name="M:CsQuery.Web.ServerConfig.Merge(CsQuery.Web.ServerConfig)">
            <summary>
            Merge any non-null options into a new options object. 
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Web.ServerConfig.Apply(CsQuery.Web.ServerConfig,CsQuery.Web.CsqWebRequest)">
            <summary>
            Apply these options to a web request
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:CsQuery.Web.ServerConfig.Default">
            <summary>
            The default settings used when making remote requests
            </summary>
        </member>
        <member name="T:CsQuery.IDomIndexedNode">
            <summary>
            A node that should be indexed
            </summary>
        </member>
        <member name="T:CsQuery.Engine.SelectorClause">
            <summary>
            A CSS selector parsed into it's component parts
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.Tag">
            <summary>
            Selection tag name
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.Criteria">
            <summary>
            This is really "parameters" and is used differently by different selectors. It's the criteria for attribute selectors;
            the node type for -of-type selectors, the equation for nth-child. For nth-of-type, its "type|equation"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CsQuery.Engine.SelectorClause.PositionIndex" -->
        <member name="P:CsQuery.Engine.SelectorClause.ChildDepth">
            <summary>
            For Child selectors, the depth of the child.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.SelectElements">
            <summary>
            The list of elements that should be matched, for elements selectors
            </summary>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.IsResultListPosition">
            <summary>
            Indicates that a position type selector refers to the result list, not the DOM position
            </summary>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Engine.SelectorClause.NoIndex">
            <summary>
            When true do not attempt to use the index to obtain a result from this selector. Used for automatically 
            generated filters
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Implementation.StringScannerEngine">
            <summary>
            String scanner engine. A lexical scanner to match complex patterns.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.#ctor">
            <summary>
            Create a new StringScannerEngine with no configuration
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.#ctor(System.String)">
             <summary>
             Create a new StringScannerEngine for a string
             </summary>
            
             <param name="text">
             The string to scan
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.op_Implicit(System.String)~CsQuery.StringScanner.Implementation.StringScannerEngine">
             <summary>
             Create a new StringScannerEngine for a string
             </summary>
            
             <param name="text">
             The string to scan.
             </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Init">
            <summary>
            Common configuration tasks for all constructors.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.AllowQuoting">
            <summary>
            Causes the next action to permit quoting -- if the first character is a quote character, stop characters between there
            and the next matching quote character will be ignored.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ToNewScanner">
            <summary>
            Creates a new stringscanner instance from the current match
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ToNewScanner(System.String)">
            <summary>
            Creates a new stringscanner instance from the current match, formatted using passed format first.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Is(System.String)">
            <summary>
            returns true of the text starting at the current position matches the passed text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.SkipWhitespace">
            <summary>
            If the current character is whitespace, advances to the next non whitespace. Otherwise, nothing happens.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.NextNonWhitespace">
            <summary>
            Advances to the next non-whitespace character
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Next(System.Int32)">
            <summary>
            Moves pointer forward one character, or to the position after the next match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Undo">
            <summary>
            Returns to the state before the last Expect. This is not affected by manual Next/Prev operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectChar(System.Char)">
            <summary>
            If current character (or next non-whitespace character) is not the expected value, then an error is thrown
            </summary>
            <param name="character"></param>
            <returns></returns>
            
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectChar(System.Collections.Generic.IEnumerable{System.Char})">
            If one of the current characters (or next non-whitespace character) is not the expected value, then an error is thrown
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectNumber">
            <summary>
            Starting with the current character, treats text as a number, seeking until the next character that would terminate a valid number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectAlpha">
            <summary>
            Starting with the current character, seeks until a non-alpha character is found
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Expect(CsQuery.StringScanner.IExpectPattern)">
            <summary>
            Continue seeking as long as the delegate returns true.
            </summary>
            <param name="validate">
            A function accepting parameters int, CharacterInfo, char[] and returning bool.
            int is the index of the matching string starting with 0
            CharacterInfo is a wrapper for the current character
            char[] is the remainder of the string starting at Pos
            </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.Expect(System.Func{System.Int32,System.Char,System.Boolean})">
             <summary>
             Continue seeking as long as the delegate returns True.
             </summary>
            
             <param name="validate">
             A pattern matching function
             </param>
            
             <returns>
             This IStringScanner instance
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.GetBoundedBy(System.String,System.String,System.Boolean)">
             <summary>
             Expects a string bounded by the character at the current postion. If the current character is
             a bounding character, then the pattern will match until the matching closing bound character
             is found, e.g. () [] {} &lt;&gt;. For non-bounding characters, the pattern will match until
             the same character is found again.
             </summary>
            
             <param name="start">
             The position to start scanning.
             </param>
             <param name="end">
             The last position.
             </param>
             <param name="allowQuoting">
             (optional) the allow quoting.
             </param>
            
             <returns>
             The bounded by.
             </returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.GetBoundedBy(System.Char,System.Boolean)">
            <summary>
            The single character bound will be matched with a closing char for () [] {} &lt;&gt; or the same char for anything else
            </summary>
            <param name="bound"></param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.ExpectImpl(CsQuery.StringScanner.IExpectPattern)">
             <summary>
             Implementation of Expect
             </summary>
            
             <param name="pattern">
             .
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.StringScannerEngine.cachedPos">
            <summary>
            Caches the current position
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.CachePos">
            <summary>
            Cache the last pos before an attempted operation,
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.NewPos(System.Int32)">
            <summary>
            Sets the current position, updates the last pos from cache, and clears any current match. If the cached position is the same
            as the current position, nothing is done.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScannerEngine.RestorePos">
            <summary>
            Restores position from cache
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.QuotingActive">
            <summary>
            When true, the next seek should honor quotes
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.NextChar">
            <summary>
            Return the character at the current scanning position without advancing the pointer. Throw an error
            if the pointer is at the end of the string.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.NextCharOrEmpty">
            <summary>
            Return the character at the current scanning position without advancing the pointer. If the pointer is
            at the end of the string, return an empty string.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Match">
            <summary>
            The string or character that has been matched
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.LastMatch">
            <summary>
            The string or character matched prior to last operation
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Finished">
            <summary>
            The current position is after the last character
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.AtEnd">
            <summary>
            The current position is on the last character
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScannerEngine.Info">
            <summary>
            The character at the current position is alphabetic
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operator.GetFunction">
            <summary>
            Return the fuction class for this type of operator
            </summary>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Implementation.DomElement">
            <summary>
            HTML elements.
            </summary>
        </member>
        <member name="T:CsQuery.IDomElement">
            <summary>
            A regular DOM element
            </summary>
        </member>
        <member name="M:CsQuery.IDomElement.ElementHtml">
            <summary>
            Returns the HTML for this element, but ignoring children/innerHTML
            </summary>
            <returns>A string of HTML</returns>
            <returntype>string</returntype>
        </member>
        <member name="P:CsQuery.IDomElement.IsBlock">
            <summary>
            The element is a block element
            </summary>
            <returntype>bool</returntype>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CsQuery.IDomElement.ElementIndex" -->
        <member name="F:CsQuery.Implementation.DomElement._DomAttributes">
            <summary>
            The dom attributes.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomElement._Style">
            <summary>
            Backing field for _Style.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomElement._Classes">
            <summary>
            Backing field for _Classes.
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.DomElement._NodeNameID">
            <summary>
            Backing field for NodeNameID property.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.#ctor(System.String)">
             <summary>
             Create a new DOM element of a specified nodeName.
             </summary>
            
             <exception cref="T:System.ArgumentException">
             Thrown when a missing or empty nodeName is passed.
             </exception>
            
             <param name="nodeName">
             The NodeName for the element (upper case).
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.#ctor(System.UInt16)">
             <summary>
             Create a new DomElement node of a nodeTipe determined by a token ID.
             </summary>
            
             <param name="tokenId">
             Token represnting an existing tokenized node type.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.Reindex">
            <summary>
            Reindexes this object. It is not necessary for end-users to call this method; all DOM
            manipulation will cause elements to be reindexed when necessary.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.Render(System.Text.StringBuilder,CsQuery.DomRenderingOptions)">
             <summary>
             Renders this object.
             </summary>
            
             <param name="sb">
             The sb.
             </param>
             <param name="options">
             Options for controlling the operation.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.ElementHtml">
             <summary>
             Returns the HTML for this element, but ignoring children/innerHTML.
             </summary>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKeys">
             <summary>
             Returns all the keys that should be in the index for this item (keys for class, tag,
             attributes, and id)
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process index keys in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.Clone">
             <summary>
             Makes a deep copy of this object.
             </summary>
            
             <returns>
             A copy of this object.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.CloneChildren">
             <summary>
             Enumerates clone children in this collection.
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process clone children in this collection.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.HasStyle(System.String)">
             <summary>
             Query if 'name' has style.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if style, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.HasClass(System.String)">
             <summary>
             Query if 'name' has class.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if class, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AddClass(System.String)">
             <summary>
             Adds the class.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RemoveClass(System.String)">
             <summary>
             Removes the class described by name.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.HasAttribute(System.UInt16)">
             <summary>
             Query if 'tokenId' has attribute.
             </summary>
            
             <param name="tokenId">
             .
             </param>
            
             <returns>
             true if attribute, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.HasAttribute(System.String)">
             <summary>
             Query if 'tokenId' has attribute.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if attribute, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.String,System.String)">
             <summary>
             Set the value of a named attribute.
             </summary>
            
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.UInt16,System.String)">
             <summary>
             Set the value of a named attribute.
             </summary>
            
             <param name="tokenId">
             .
             </param>
             <param name="value">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.String)">
             <summary>
             Sets an attribute with no value.
             </summary>
            
             <param name="name">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.UInt16)">
             <summary>
             Sets an attribute with no value.
             </summary>
            
             <param name="tokenId">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttributeRaw(System.UInt16,System.String)">
             <summary>
             Used by DomElement to (finally) set the ID value.
             </summary>
            
             <param name="tokenId">
             .
             </param>
             <param name="value">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RemoveAttribute(System.String)">
             <summary>
             Removes the attribute described by name.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RemoveAttribute(System.UInt16)">
             <summary>
             Removes the attribute described by name.
             </summary>
            
             <param name="tokenId">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.String)">
             <summary>
             Gets an attribute value, or returns null if the value is missing. If a valueless attribute is
             found, this will also return null. HasAttribute should be used to test for such attributes.
             Attributes with an empty string value will return String.Empty.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             The attribute.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.UInt16)">
             <summary>
             Gets an attribute value, or returns null if the value is missing. If a valueless attribute is
             found, this will also return null. HasAttribute should be used to test for such attributes.
             Attributes with an empty string value will return String.Empty.
             </summary>
            
             <param name="tokenId">
             .
             </param>
            
             <returns>
             The attribute.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.String,System.String)">
             <summary>
             Return an attribute value identified by name. If it doesn't exist, return the provided
             default value.
             </summary>
            
             <param name="name">
             The attribute name.
             </param>
             <param name="defaultValue">
             .
             </param>
            
             <returns>
             The attribute.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.UInt16,System.String)">
             <summary>
             Return an attribute value identified by a token ID. If it doesn't exist, return the provided
             default value.
             </summary>
            
             <param name="tokenId">
             .
             </param>
             <param name="defaultValue">
             .
             </param>
            
             <returns>
             The attribute.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.TryGetAttribute(System.UInt16,System.String@)">
             <summary>
             Try get attribute.
             </summary>
            
             <param name="tokenId">
             .
             </param>
             <param name="value">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.TryGetAttribute(System.String,System.String@)">
             <summary>
             Try get attribute.
             </summary>
            
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.ToString">
             <summary>
             Convert this object into a string representation.
             </summary>
            
             <returns>
             This object as a string.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AddStyle(System.String)">
             <summary>
             Add a single style in the form "styleName: value".
             </summary>
            
             <param name="style">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AddStyle(System.String,System.Boolean)">
             <summary>
             Add a single style in the form "styleName: value".
             </summary>
            
             <param name="style">
             .
             </param>
             <param name="strict">
             true to strict.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RemoveStyle(System.String)">
             <summary>
             Removes the style described by name.
             </summary>
            
             <param name="name">
             .
             </param>
            
             <returns>
             true if it succeeds, false if it fails.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetStyles(System.String)">
             <summary>
             Sets the styles.
             </summary>
            
             <param name="styles">
             The styles.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetStyles(System.String,System.Boolean)">
             <summary>
             Sets the styles.
             </summary>
            
             <param name="styles">
             The styles.
             </param>
             <param name="strict">
             true to strict.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetStyle(System.String,System.String)">
             <summary>
             Sets a style.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetStyle(System.String,System.String,System.Boolean)">
             <summary>
             Sets a style.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
             <param name="strict">
             true to strict.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetStyle(System.String)">
             <summary>
             Gets a style.
             </summary>
            
             <exception cref="T:System.NotImplementedException">
             Thrown when the requested operation is unimplemented.
             </exception>
            
             <param name="name">
             .
             </param>
            
             <returns>
             The style.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributeIndexKey(System.String)">
             <summary>
             Attribute index key.
             </summary>
            
             <param name="attrName">
             Name of the attribute.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributeIndexKey(System.UInt16)">
             <summary>
             Attribute index key.
             </summary>
            
             <param name="attrId">
             Identifier for the attribute.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributeRemoveFromIndex(System.UInt16)">
             <summary>
             Attribute remove from index.
             </summary>
            
             <param name="attrId">
             Identifier for the attribute.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributeAddToIndex(System.UInt16)">
             <summary>
             Attribute add to index.
             </summary>
            
             <param name="attrId">
             Identifier for the attribute.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetClassName(System.String)">
             <summary>
             Sets the class name.
             </summary>
            
             <param name="className">
             And sets the value of the class attribute of the specified element.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.hasDefaultValue">
             <summary>
             Query if this object has default value.
             </summary>
            
             <returns>
             true if default value, false if not.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKey(System.String,System.UInt16)">
             <summary>
             Index key.
             </summary>
            
             <param name="prefix">
             The prefix.
             </param>
             <param name="keyTokenId">
             Identifier for the key token.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKey(System.String,System.String)">
             <summary>
             Index key.
             </summary>
            
             <param name="prefix">
             The prefix.
             </param>
             <param name="key">
             The key.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKey(System.String,System.String,System.String)">
             <summary>
             Index key.
             </summary>
            
             <param name="prefix">
             The prefix.
             </param>
             <param name="key">
             The key.
             </param>
             <param name="path">
             Full pathname of the file.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKey(System.String,System.UInt16,System.String)">
             <summary>
             Index key.
             </summary>
            
             <param name="prefix">
             The prefix.
             </param>
             <param name="keyTokenId">
             Identifier for the key token.
             </param>
             <param name="path">
             Full pathname of the file.
             </param>
            
             <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetHtml(CsQuery.DomRenderingOptions,System.Text.StringBuilder,System.Boolean)">
             <summary>
             Gets a HTML.
             </summary>
            
             <param name="options">
             Options for controlling the operation.
             </param>
             <param name="sb">
             The sb.
             </param>
             <param name="includeChildren">
             true to include, false to exclude the children.
             </param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RenderAttribute(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
             <summary>
             TODO this really should be in Attributes.
             </summary>
            
             <param name="sb">
             The sb.
             </param>
             <param name="name">
             .
             </param>
             <param name="value">
             .
             </param>
             <param name="quoteAll">
             true to quote all.
             </param>
            
             ### <returns>
             .
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#String}}#GetEnumerator">
             <summary>
             Gets the enumerator.
             </summary>
            
             <typeparam name="string">
             Type of the string.
             </typeparam>
             <typeparam name="string">
             Type of the string.
             </typeparam>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.System#Collections#IEnumerable#GetEnumerator">
             <summary>
             Gets the enumerator.
             </summary>
            
             <returns>
             The enumerator.
             </returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AttributesCollection">
             <summary>
             Enumerate the attributes + class &amp; style.
             </summary>
            
             <returns>
             An enumerator that allows foreach to be used to process attributes collection in this
             collection.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.DomAttributes">
            <summary>
            Gets the dom attributes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Style">
            <summary>
            An object encapsulating the Styles associated with this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Attributes">
             <summary>
             Access to the IAttributeCollection interface for this element's attributes.
             </summary>
            
             <implementation>
             We don't actually refer to the inner AttributeCollection object here because we cannot allow
             users to set attributes directly in the object: they must use SetAttribute so that special
             handling for "class" and "style" as well as indexing can be performed. To avoid creating a
             wrapper object,.
             </implementation>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ClassName">
            <summary>
            gets and sets the value of the "class" attribute of the specified element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Id">
            <summary>
            Get or set value of the "id" attribute.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.NodeName">
            <summary>
            The NodeName for the element. This always returns the name in upper case.
            </summary>11
        </member>
        <member name="P:CsQuery.Implementation.DomElement.NodeNameID">
            <summary>
            Gets the token that represents this element's NodeName
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Type">
             <summary>
             The value of the "type" attribute. For input elements, this property always returns a
             lowercase value and defaults to "text" if there is no type attribute. For other element types,
             it simply returns the value of the "type" attribute.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/type
             </url>
            
             <implementation>
             TODO: in HTML5 type can be used on OL attributes (and maybe others?) and its value is case
             sensitive. The Type of input elements is always lower case, though. This behavior needs to be
             verified against the spec.
             </implementation>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Name">
            <implementation>
            TODO: Verify that the attribute is applicable to this node type and return null otherwise.
            </implementation>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.DefaultValue">
            <summary>
            The value of an input element, or the text of a textarea element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Value">
            <summary>
            For input elements, the "value" property of this element. Returns null for other element
            types.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.NodeType">
            <summary>
            Gets the type of the node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ParentNode">
            <summary>
            The direct parent of this node.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.HasAttributes">
            <summary>
            Returns true if this node has any attributes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.HasStyles">
            <summary>
            Returns true if this node has any styles defined.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.HasClasses">
            <summary>
            Returns true if this node has CSS classes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.PathID">
            <summary>
            Unique ID assigned when added to a dom. This is not the full path but just the ID at this
            level. The full path is never stored with each node to prevent having to regenerate if node
            trees are moved.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.IsIndexed">
            <summary>
            Gets a value indicating whether this object type should be indexed.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerHtmlAllowed">
            <summary>
            Gets a value indicating whether HTML is allowed as a child of this element. It is possible
            for this value to be false but InnerTextAllowed to be true for elements which can have inner
            content, but no child HTML markup, such as &lt;textarea&gt; and &lt;script&gt;
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerTextAllowed">
            <summary>
            Gets a value indicating whether text content is allowed as a child of this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ChildrenAllowed">
            <summary>
            Gets a value indicating whether this element may have children. When false, it means this is
            a void element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Complete">
            <summary>
            When false, this element has not had a tag name assigned yet. Normally you should not create
            elements like this, however, during DOM construction this could be true.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Item(System.String)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="attribute">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Item(System.Int32)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="index">
             The zero-based index of the child node to access.
             </param>
            
             <returns>
             IDomObject, the element at the specified index within this node's children.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Selected">
             <summary>
             Indicates whether the element is selected or not. This value is read-only. To change the
             selection, set either the selectedIndex or selectedItem property of the containing element.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Attribute/selected
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Checked">
             <summary>
             Gets or sets a value indicating whether the element is checked.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/checked
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ReadOnly">
             <summary>
             Gets or sets a value indicating whether the only should be read.
             </summary>
            
             <url>
             https://developer.mozilla.org/en/XUL/Property/readOnly
             </url>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerHTML">
            <summary>
            Returns text of the inner HTML. When setting, any children will be removed.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerText">
            <summary>
            Gets or sets the text content of a node and its descendants.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ElementIndex">
            <summary>
            The index excluding text nodes.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.IndexReference">
            <summary>
            The object to which this index refers.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.IsBlock">
            <summary>
            Returns true if this element is a block-type element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Classes">
            <summary>
            A sequence of all unique class names defined on this element.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.CsQuery#IAttributeCollection#Item(System.String)">
             <summary>
             The child node at the specified index.
             </summary>
            
             <param name="attributeName">
             .
             </param>
            
             <returns>
             The indexed item.
             </returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.CsQuery#IAttributeCollection#Length">
             <summary>
             The number of attributes in this attribute collection. This includes special attributes such
             as "class", "id", and "style".
             </summary>
            
             <returntype>
             int
             </returntype>
        </member>
        <member name="T:CsQuery.Utility.RangeSortedDictionary`1">
            <summary>
            A dictionary that is substring-lookup capable. This is the data structure used to index HTML documents for selectors.
            A SortedSet of keys is used for the index because it allows fast access by substring. A list of keys obtained from the
            SortedSet for a selector is used to obtain the target references from a regular dictionary.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:CsQuery.Utility.RangeSortedDictionary`1.GetRange(System.String,System.Int32,System.Boolean)">
            <summary>
            Return only keys at depth. Zero is the matching key.
            </summary>
            <param name="subKey"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.HtmlParser.HtmlData">
            <summary>
            Reference data about HTML tags and attributes;
            methods to test tokens for certain properties;
            and the tokenizer
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.pathIdLength">
            <summary>
            Length of each node's path ID (in characters), sets a limit on the number of child nodes before a reindex
            is required. For most cases, a small number will yield better performance. In production we probably can get
            away with just 1 (meaning a char=65k possible values). 
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.indexSeparator">
            <summary>
            The character used to separate the unique part of an index entry from its path. When debugging
            it is useful to have a printable character. Otherwise we want something that is guaranteed to be
            a unique stop character.
            </summary>
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.tagActionNothing">
            Hardcode some tokens to improve performance when referring to them often
        </member>
        <member name="F:CsQuery.HtmlParser.HtmlData.nextID">
            <summary>
            Fields used internally
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.HtmlChildrenNotAllowed(System.UInt16)">
            <summary>
            This type does not allow HTML children. Some of these types may allow text but not HTML.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.HtmlChildrenNotAllowed(System.String)">
            <summary>
            This type does not allow HTML children. Some of these types may allow text but not HTML.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.ChildrenAllowed(System.UInt16)">
            <summary>
            This element may have children
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsBoolean(System.UInt16)">
            <summary>
            The attribute is a boolean type
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.IsBoolean(System.String)">
            <summary>
            The attribute is a boolean type
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.TokenIDCaseSensitive(System.String)">
            <summary>
            Return a token ID for a name, adding to the index if it doesn't exist.
            When indexing tags and attributes, ignoreCase should be used
            </summary>
            <param name="tokenName"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.TokenIDImpl(System.String)">
            <summary>
            Return a token ID for a name, adding to the index if it doesn't exist.
            When indexing tags and attributes, ignoreCase should be used
            </summary>
            <param name="tokenName"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.TokenName(System.UInt16)">
            <summary>
            Return a token name for an ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.BaseXXEncode(System.Int32)">
            <summary>
            Encode to base XX (defined in constants)
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.HtmlEncode(System.String)">
            <summary>
            HtmlEncode the string (pass-thru to system; abstracted in case we want to change)
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.AttributeEncode(System.String)">
            <summary>
            Encode text as part of an attribute
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.AttributeEncode(System.String,System.Boolean,System.String@)">
            <summary>
            Htmlencode a string, except for double-quotes, so it can be enclosed in single-quotes
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.SpecialTagAction(System.String,System.String,System.Boolean)">
            <summary>
            For testing only - the inline code never uses this version
            </summary>
            <param name="tag"></param>
            <param name="newTag"></param>
            <param name="isDocument"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.SpecialTagActionForDocument(System.UInt16,System.UInt16)">
            <summary>
            Determine a course of action given a new tag, its parent, and whether or not to treat this as a document.
            Return 1 to close, 0 to do nothing, or an ID to generate
            </summary>
            <param name="parentTagId"></param>
            <param name="newTagId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.CreateParentFor(System.UInt16)">
            <summary>
            For tags that may automatically generate a parent, this tells what it is
            </summary>
            <param name="newTagId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.setBit(System.Collections.Generic.IEnumerable{System.String},CsQuery.HtmlParser.TokenProperties)">
            <summary>
            For each value in "tokens" (ignoring case) sets the specified bit in the reference table
            </summary>
            <param name="tokens"></param>
            <param name="bit"></param>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.setBit(System.Collections.Generic.IEnumerable{System.UInt16},CsQuery.HtmlParser.TokenProperties)">
            <summary>
            For each value in "tokens" sets the specified bit in the reference table
            </summary>
            <param name="tokens"></param>
            <param name="bit"></param>
        </member>
        <member name="M:CsQuery.HtmlParser.HtmlData.setBit(System.UInt16,CsQuery.HtmlParser.TokenProperties)">
            <summary>
            Set the specified bit in the reference table for "token"
            </summary>
            <param name="value"></param>
            <param name="bit"></param>
        </member>
        <member name="P:CsQuery.HtmlParser.HtmlData.Keys">
            <summary>
            A list of all keys (tokens) created
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Implementation.CharacterInfo">
            <summary>
            A class that provides methods with metadata about a character.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.CharacterInfo.#ctor">
            <summary>
            Create a new unbound CharacterInfo class
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.CharacterInfo.#ctor(System.Char)">
             <summary>
             Create a new CharacterInfo class bound to a character.
             </summary>
            
             <param name="character">
             The character.
             </param>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Type">
            <summary>
            Flags indicating the use of this character
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.NumericExtended">
            <summary>
            Returns true if numeric, dot or -
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Bound">
            <summary>
            Enclosing, plus double and single quotes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CsQuery.StringScanner.Implementation.CharacterInfo.Enclosing" -->
    </members>
</doc>
